
==================== FINAL INTERFACE ====================
2016-12-20 11:29:21.3531354 UTC

interface main@main:Common 8001
  interface hash: 77343baa109c10e01f7a8ae4a7bf1807
  ABI hash: 2fce3a68b0e049ef63a25a749268d745
  export-list hash: 0dd6aa7fd7556d7d9ed309dd2c746bb4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5dce9974ea0e787ec0b9bd9d1203e496
  sig of: Nothing
  used TH splices: False
  where
exports:
  Common.attackCards
  Common.blackenCards
  Common.changeColCards
  Common.clearHands
  Common.colorBlack
  Common.colorInHand
  Common.colorizeWildcard
  Common.countCards
  Common.countCardsByColor
  Common.fullDeck
  Common.getCardWithColor
  Common.getCardWithValue
  Common.getCards
  Common.getWildcard
  Common.isAttackCard
  Common.isChangeColCards
  Common.isNumberCard
  Common.isWildcard
  Common.noCard
  Common.noPlayer
  Common.nplicate
  Common.numberCards
  Common.takeCards
  Common.valueInHand
  Common.whiteDummy
  Common.wildCards
  Common.wildcardInHand
  Common.Action{Common.AttackDraw2 Common.AttackReverse Common.AttackSkip Common.AttackWildDraw4 Common.EndTurn Common.TakeFromDeck Common.UseCard}
  Common.Attack{Common.Draw2 Common.Draw4 Common.NoAttack Common.Skip}
  Common.Card{Common.Card color value}
  Common.D_Stack
  Common.Deck
  Common.Hand
  Common.Player{Common.AiPlayer Common.HPlayer Common.NoPlayer hand name}
  Common.State{Common.State cur_player d_stack deck e_players players}
  Common.Value{Common.ChCol Common.ChDir Common.Dummy Common.Eight Common.Five Common.Four Common.Nine Common.One Common.Plus2 Common.Plus4 Common.Seven Common.Six Common.Stop Common.Three Common.Two Common.Zero}
module dependencies:
package dependencies: Win32-2.3.1.1@Win32-2.3.1.1
                      ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-DlzOk98pOsTIrg6vAjszFA
                      base-4.9.0.0* ghc-prim-0.5.0.0 integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-DlzOk98pOsTIrg6vAjszFA:System.Console.ANSI ca076ca422c52166e42be1349b9453ba
import  -/  ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-DlzOk98pOsTIrg6vAjszFA:System.Console.ANSI.Common 120534aeddf149317cb5216a438351ac
import  -/  base-4.9.0.0:Data.Foldable 3cbed01c922be29649c33015287c82ca
import  -/  base-4.9.0.0:Data.List d711f98b49ef5d33e5b3d404631ed073
import  -/  base-4.9.0.0:Data.Maybe 086a84053ef7f7810663b5f03b7ec3f7
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.Enum dab7089478c738f0ffbf72212d9113c9
import  -/  base-4.9.0.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.0.0:GHC.List 47d436dfb7454bb1883fb4d943e3f389
import  -/  base-4.9.0.0:GHC.Num f0aed3315b3ed1b330b71fc4148a5581
import  -/  base-4.9.0.0:GHC.Read 4c41c56299e3935fa784002a9231b325
import  -/  base-4.9.0.0:GHC.Real 011de9ca3282ad24a84e4e15f974f98e
import  -/  base-4.9.0.0:GHC.Show 0b5845243cb2ec62b57dd6963d276ec6
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  base-4.9.0.0:Text.ParserCombinators.ReadPrec 452408038bf4813973bc0de3c5248cff
import  -/  base-4.9.0.0:Text.Read.Lex 70e7158fbfbfbfe23ec26422fecddba8
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
ef5b9b5639d25aa2033e174052440b81
  $fEnumCard :: GHC.Enum.Enum Common.Card
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Card
                  Common.$fEnumCard_$csucc
                  Common.$fEnumCard_$cpred
                  Common.$fEnumCard_$ctoEnum
                  Common.$fEnumCard_$cfromEnum
                  Common.$fEnumCard_$cenumFrom
                  Common.$fEnumCard_$cenumFromThen
                  Common.$fEnumCard_$cenumFromTo
                  Common.$fEnumCard_$cenumFromThenTo -}
eb7b02e57a57230c97de0244101eb114
  $fEnumCard1 :: GHC.Prim.Int# -> Common.Value
  {- Arity: 1, Strictness: <L,U>x -}
ef5b9b5639d25aa2033e174052440b81
  $fEnumCard_$cenumFrom :: Common.Card -> [Common.Card]
  {- Arity: 1, Strictness: <S(SS),1*U(1*U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Common.Card) ->
                 case w of ww { Common.Card ww1 ww2 ->
                 Common.$w$cenumFrom ww1 ww2 }) -}
ef5b9b5639d25aa2033e174052440b81
  $fEnumCard_$cenumFromThen ::
    Common.Card -> Common.Card -> [Common.Card]
  {- Arity: 2, Strictness: <S(SS),1*U(1*U,1*U)><S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Common.Card) (w1 :: Common.Card) ->
                 case w of ww { Common.Card ww1 ww2 ->
                 case w1 of ww3 { Common.Card ww4 ww5 ->
                 Common.$w$cenumFromThen ww1 ww2 ww4 ww5 } }) -}
ef5b9b5639d25aa2033e174052440b81
  $fEnumCard_$cenumFromThenTo ::
    Common.Card -> Common.Card -> Common.Card -> [Common.Card]
  {- Arity: 3,
     Strictness: <S(SS),1*U(1*U,1*U)><S(SS),1*U(1*U,1*U)><S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Common.Card) (w1 :: Common.Card) (w2 :: Common.Card) ->
                 case w of ww { Common.Card ww1 ww2 ->
                 case w1 of ww3 { Common.Card ww4 ww5 ->
                 case w2 of ww6 { Common.Card ww7 ww8 ->
                 Common.$w$cenumFromThenTo ww1 ww2 ww4 ww5 ww7 ww8 } } }) -}
ef5b9b5639d25aa2033e174052440b81
  $fEnumCard_$cenumFromTo ::
    Common.Card -> Common.Card -> [Common.Card]
  {- Arity: 2, Strictness: <S(SS),1*U(1*U,1*U)><S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Common.Card) (w1 :: Common.Card) ->
                 case w of ww { Common.Card ww1 ww2 ->
                 case w1 of ww3 { Common.Card ww4 ww5 ->
                 Common.$w$cenumFromTo ww1 ww2 ww4 ww5 } }) -}
ef5b9b5639d25aa2033e174052440b81
  $fEnumCard_$cfromEnum :: Common.Card -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Common.Card) ->
                 case w of ww { Common.Card ww1 ww2 ->
                 case Common.$w$cfromEnum ww1 ww2 of ww3 { DEFAULT ->
                 GHC.Types.I# ww3 } }) -}
ef5b9b5639d25aa2033e174052440b81
  $fEnumCard_$cpred :: Common.Card -> Common.Card
  {- Arity: 1, Strictness: <L,1*U(1*U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Common.Card) ->
                 case Common.$w$cpred w of ww { (#,#) ww1 ww2 ->
                 Common.Card ww1 ww2 }) -}
ef5b9b5639d25aa2033e174052440b81
  $fEnumCard_$csucc :: Common.Card -> Common.Card
  {- Arity: 1, Strictness: <L,1*U(1*U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Common.Card) ->
                 case Common.$w$csucc w of ww { (#,#) ww1 ww2 ->
                 Common.Card ww1 ww2 }) -}
ef5b9b5639d25aa2033e174052440b81
  $fEnumCard_$ctoEnum :: GHC.Types.Int -> Common.Card
  {- Arity: 1, Strictness: <L,1*U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case Common.$w$ctoEnum w of ww { (#,#) ww1 ww2 ->
                 Common.Card ww1 ww2 }) -}
ef5b9b5639d25aa2033e174052440b81
  $fEnumCard_go :: GHC.Prim.Int# -> [Common.Card]
  {- Arity: 1, Strictness: <L,U> -}
eb7b02e57a57230c97de0244101eb114
  $fEnumValue :: GHC.Enum.Enum Common.Value
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Value
                  Common.$fEnumValue_$csucc
                  Common.$fEnumValue_$cpred
                  Common.$fEnumValue_$ctoEnum
                  Common.$fEnumValue_$cfromEnum
                  Common.$fEnumValue_$cenumFrom
                  Common.$fEnumValue_$cenumFromThen
                  Common.$fEnumValue_$cenumFromTo
                  Common.$fEnumValue_$cenumFromThenTo -}
eb7b02e57a57230c97de0244101eb114
  $fEnumValue1 :: Common.Value
  {- Strictness: x -}
eb7b02e57a57230c97de0244101eb114
  $fEnumValue2 :: Common.Value
  {- Strictness: x -}
eb7b02e57a57230c97de0244101eb114
  $fEnumValue_$cenumFrom :: Common.Value -> [Common.Value]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (a :: Common.Value) ->
                 let {
                   x0 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value a
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 15#) of wild {
                   GHC.Types.False -> Common.$fEnumValue_go x0
                   GHC.Types.True -> GHC.Types.[] @ Common.Value }) -}
eb7b02e57a57230c97de0244101eb114
  $fEnumValue_$cenumFromThen ::
    Common.Value -> Common.Value -> [Common.Value]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Common.Value) (b :: Common.Value) ->
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value a
                 } in
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value b
                 } in
                 let {
                   $j :: GHC.Prim.Int# -> [Common.Value]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (y :: GHC.Prim.Int#)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# b# a#) of wild {
                       GHC.Types.False
                       -> GHC.Enum.efdtIntDnFB
                            @ [Common.Value]
                            Common.$fEnumValue_c1
                            (GHC.Types.[] @ Common.Value)
                            a#
                            b#
                            y
                       GHC.Types.True
                       -> GHC.Enum.efdtIntUpFB
                            @ [Common.Value]
                            Common.$fEnumValue_c1
                            (GHC.Types.[] @ Common.Value)
                            a#
                            b#
                            y }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># a# b#) of wild {
                   GHC.Types.False -> $j 15# GHC.Types.True -> $j 0# }) -}
eb7b02e57a57230c97de0244101eb114
  $fEnumValue_$cenumFromThenTo ::
    Common.Value -> Common.Value -> Common.Value -> [Common.Value]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ (x6 :: Common.Value)
                   (x7 :: Common.Value)
                   (y :: Common.Value) ->
                 let {
                   x8 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value x6
                 } in
                 let {
                   x9 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value x7
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x9 x8) of wild {
                   GHC.Types.False
                   -> GHC.Enum.efdtIntDnFB
                        @ [Common.Value]
                        Common.$fEnumValue_c
                        (GHC.Types.[] @ Common.Value)
                        x8
                        x9
                        (GHC.Prim.dataToTag# @ Common.Value y)
                   GHC.Types.True
                   -> GHC.Enum.efdtIntUpFB
                        @ [Common.Value]
                        Common.$fEnumValue_c
                        (GHC.Types.[] @ Common.Value)
                        x8
                        x9
                        (GHC.Prim.dataToTag# @ Common.Value y) }) -}
eb7b02e57a57230c97de0244101eb114
  $fEnumValue_$cenumFromTo ::
    Common.Value -> Common.Value -> [Common.Value]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x6 :: Common.Value) (y :: Common.Value) ->
                 let {
                   x0 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value x6
                 } in
                 let {
                   y1 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value y
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 y1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go3 :: GHC.Prim.Int# -> [Common.Value]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x7 :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ Common.Value
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# x7 0#) of wild1 {
                               GHC.Types.False -> Common.$fEnumCard1 x7
                               GHC.Types.True
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.<=# x7 15#) of wild2 {
                                    GHC.Types.False -> Common.$fEnumCard1 x7
                                    GHC.Types.True -> GHC.Prim.tagToEnum# @ Common.Value x7 } })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x7 y1) of wild1 {
                               GHC.Types.False -> go3 (GHC.Prim.+# x7 1#)
                               GHC.Types.True -> GHC.Types.[] @ Common.Value })
                      } in
                      go3 x0
                   GHC.Types.True -> GHC.Types.[] @ Common.Value }) -}
eb7b02e57a57230c97de0244101eb114
  $fEnumValue_$cfromEnum :: Common.Value -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Common.Value) ->
                 case a of x6 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.dataToTag# @ Common.Value x6) }) -}
eb7b02e57a57230c97de0244101eb114
  $fEnumValue_$cpred :: Common.Value -> Common.Value
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Common.Value) ->
                 case a of x6 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Common.Value x6 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum# @ Common.Value (GHC.Prim.+# wild -1#)
                   0# -> Common.$fEnumValue1 } }) -}
eb7b02e57a57230c97de0244101eb114
  $fEnumValue_$csucc :: Common.Value -> Common.Value
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Common.Value) ->
                 case a of x6 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Common.Value x6 of wild {
                   DEFAULT -> GHC.Prim.tagToEnum# @ Common.Value (GHC.Prim.+# wild 1#)
                   15# -> Common.$fEnumValue2 } }) -}
eb7b02e57a57230c97de0244101eb114
  $fEnumValue_$ctoEnum :: GHC.Types.Int -> Common.Value
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Common.$w$ctoEnum1 ww1 }) -}
eb7b02e57a57230c97de0244101eb114
  $fEnumValue_c :: GHC.Types.Int -> [Common.Value] -> [Common.Value]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x6 :: GHC.Types.Int) (ys :: [Common.Value]) ->
                 GHC.Types.: @ Common.Value (Common.$fEnumValue_$ctoEnum x6) ys) -}
eb7b02e57a57230c97de0244101eb114
  $fEnumValue_c1 :: GHC.Types.Int -> [Common.Value] -> [Common.Value]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x6 :: GHC.Types.Int) (ys :: [Common.Value]) ->
                 GHC.Types.:
                   @ Common.Value
                   (case x6 of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ Common.Value a })
                   ys) -}
eb7b02e57a57230c97de0244101eb114
  $fEnumValue_go :: GHC.Prim.Int# -> [Common.Value]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fEqAction :: GHC.Classes.Eq Common.Action
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Action Common.$fEqAction_$c== Common.$fEqAction_$c/= -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fEqAction_$c/= :: Common.Action -> Common.Action -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Common.Action) (b :: Common.Action) ->
                 case a of wild {
                   Common.UseCard
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Common.UseCard -> GHC.Types.False }
                   Common.TakeFromDeck
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Common.TakeFromDeck -> GHC.Types.False }
                   Common.EndTurn
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Common.EndTurn -> GHC.Types.False }
                   Common.AttackReverse
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Common.AttackReverse -> GHC.Types.False }
                   Common.AttackSkip
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Common.AttackSkip -> GHC.Types.False }
                   Common.AttackDraw2
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Common.AttackDraw2 -> GHC.Types.False }
                   Common.AttackWildDraw4
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Common.AttackWildDraw4 -> GHC.Types.False } }) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fEqAction_$c== :: Common.Action -> Common.Action -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Common.Action) (ds1 :: Common.Action) ->
                 case ds of wild {
                   Common.UseCard
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Common.UseCard -> GHC.Types.True }
                   Common.TakeFromDeck
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Common.TakeFromDeck -> GHC.Types.True }
                   Common.EndTurn
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Common.EndTurn -> GHC.Types.True }
                   Common.AttackReverse
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Common.AttackReverse -> GHC.Types.True }
                   Common.AttackSkip
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Common.AttackSkip -> GHC.Types.True }
                   Common.AttackDraw2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Common.AttackDraw2 -> GHC.Types.True }
                   Common.AttackWildDraw4
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Common.AttackWildDraw4 -> GHC.Types.True } }) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fEqAttack :: GHC.Classes.Eq Common.Attack
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Attack Common.$fEqAttack_$c== Common.$fEqAttack_$c/= -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fEqAttack_$c/= :: Common.Attack -> Common.Attack -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Common.Attack) (b :: Common.Attack) ->
                 case a of wild {
                   Common.NoAttack
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Common.NoAttack -> GHC.Types.False }
                   Common.Skip
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Common.Skip -> GHC.Types.False }
                   Common.Draw2
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Common.Draw2 -> GHC.Types.False }
                   Common.Draw4
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Common.Draw4 -> GHC.Types.False } }) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fEqAttack_$c== :: Common.Attack -> Common.Attack -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Common.Attack) (ds1 :: Common.Attack) ->
                 case ds of wild {
                   Common.NoAttack
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Common.NoAttack -> GHC.Types.True }
                   Common.Skip
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Common.Skip -> GHC.Types.True }
                   Common.Draw2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Common.Draw2 -> GHC.Types.True }
                   Common.Draw4
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Common.Draw4 -> GHC.Types.True } }) -}
ef5b9b5639d25aa2033e174052440b81
  $fEqCard :: GHC.Classes.Eq Common.Card
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Card Common.$fEqCard_$c== Common.$fEqCard_$c/= -}
ef5b9b5639d25aa2033e174052440b81
  $fEqCard_$c/= :: Common.Card -> Common.Card -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Common.Card) (b :: Common.Card) ->
                 case Common.$fEqCard_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ef5b9b5639d25aa2033e174052440b81
  $fEqCard_$c== :: Common.Card -> Common.Card -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Common.Card) (w1 :: Common.Card) ->
                 case w of ww { Common.Card ww1 ww2 ->
                 case w1 of ww3 { Common.Card ww4 ww5 ->
                 Common.$w$c== ww1 ww2 ww4 ww5 } }) -}
ceab6de2a9d9db59c8387f4e28ffb42e
  $fEqPlayer :: GHC.Classes.Eq Common.Player
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Player Common.$fEqPlayer_$c== Common.$fEqPlayer_$c/= -}
ceab6de2a9d9db59c8387f4e28ffb42e
  $fEqPlayer_$c/= :: Common.Player -> Common.Player -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Common.Player) (b :: Common.Player) ->
                 case Common.$fEqPlayer_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ceab6de2a9d9db59c8387f4e28ffb42e
  $fEqPlayer_$c== :: Common.Player -> Common.Player -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Common.Player) (ds1 :: Common.Player) ->
                 case ds of wild {
                   Common.HPlayer a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Common.HPlayer b1 b2
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Classes.$fEq[]_$c== @ Common.Card Common.$fEqCard a2 b2 } }
                   Common.AiPlayer a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Common.AiPlayer b1 b2
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Classes.$fEq[]_$c== @ Common.Card Common.$fEqCard a2 b2 } }
                   Common.NoPlayer a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Common.NoPlayer b1 -> GHC.Base.eqString a1 b1 } }) -}
eb7b02e57a57230c97de0244101eb114
  $fEqValue :: GHC.Classes.Eq Common.Value
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Value Common.$fEqValue_$c== Common.$fEqValue_$c/= -}
eb7b02e57a57230c97de0244101eb114
  $fEqValue_$c/= :: Common.Value -> Common.Value -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Common.Value) (b :: Common.Value) ->
                 case a of x6 { DEFAULT ->
                 case b of x7 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ Common.Value x6)
                           (GHC.Prim.dataToTag# @ Common.Value x7)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
eb7b02e57a57230c97de0244101eb114
  $fEqValue_$c== :: Common.Value -> Common.Value -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Common.Value) (b :: Common.Value) ->
                 case a of x6 { DEFAULT ->
                 case b of x7 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ Common.Value x6)
                      (GHC.Prim.dataToTag# @ Common.Value x7)) } }) -}
ef5b9b5639d25aa2033e174052440b81
  $fOrdCard :: GHC.Classes.Ord Common.Card
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Card
                  Common.$fEqCard
                  Common.$fOrdCard_$ccompare
                  Common.$fOrdCard_$c<
                  Common.$fOrdCard_$c<=
                  Common.$fOrdCard_$c>
                  Common.$fOrdCard_$c>=
                  Common.$fOrdCard_$cmax
                  Common.$fOrdCard_$cmin -}
ef5b9b5639d25aa2033e174052440b81
  $fOrdCard_$c< :: Common.Card -> Common.Card -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x6 :: Common.Card) (y :: Common.Card) ->
                 case Common.$fOrdCard_$ccompare x6 y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
ef5b9b5639d25aa2033e174052440b81
  $fOrdCard_$c<= :: Common.Card -> Common.Card -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x6 :: Common.Card) (y :: Common.Card) ->
                 case Common.$fOrdCard_$ccompare x6 y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
ef5b9b5639d25aa2033e174052440b81
  $fOrdCard_$c> :: Common.Card -> Common.Card -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x6 :: Common.Card) (y :: Common.Card) ->
                 case Common.$fOrdCard_$ccompare x6 y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
ef5b9b5639d25aa2033e174052440b81
  $fOrdCard_$c>= :: Common.Card -> Common.Card -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x6 :: Common.Card) (y :: Common.Card) ->
                 case Common.$fOrdCard_$ccompare x6 y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
ef5b9b5639d25aa2033e174052440b81
  $fOrdCard_$ccompare ::
    Common.Card -> Common.Card -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Common.Card) (w1 :: Common.Card) ->
                 case w of ww { Common.Card ww1 ww2 ->
                 case w1 of ww3 { Common.Card ww4 ww5 ->
                 Common.$w$ccompare ww1 ww2 ww4 ww5 } }) -}
ef5b9b5639d25aa2033e174052440b81
  $fOrdCard_$cmax :: Common.Card -> Common.Card -> Common.Card
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,U)><S(SL),U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x6 :: Common.Card) (y :: Common.Card) ->
                 case Common.$fOrdCard_$ccompare x6 y of wild {
                   DEFAULT -> y GHC.Types.GT -> x6 }) -}
ef5b9b5639d25aa2033e174052440b81
  $fOrdCard_$cmin :: Common.Card -> Common.Card -> Common.Card
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,U)><S(SL),U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x6 :: Common.Card) (y :: Common.Card) ->
                 case Common.$fOrdCard_$ccompare x6 y of wild {
                   DEFAULT -> x6 GHC.Types.GT -> y }) -}
eb7b02e57a57230c97de0244101eb114
  $fOrdValue :: GHC.Classes.Ord Common.Value
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Value
                  Common.$fEqValue
                  Common.$fOrdValue_$ccompare
                  Common.$fOrdValue_$c<
                  Common.$fOrdValue_$c<=
                  Common.$fOrdValue_$c>
                  Common.$fOrdValue_$c>=
                  Common.$fOrdValue_$cmax
                  Common.$fOrdValue_$cmin -}
eb7b02e57a57230c97de0244101eb114
  $fOrdValue_$c< :: Common.Value -> Common.Value -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Common.Value) (b :: Common.Value) ->
                 case a of x6 { DEFAULT ->
                 case b of x7 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<#
                      (GHC.Prim.dataToTag# @ Common.Value x6)
                      (GHC.Prim.dataToTag# @ Common.Value x7)) } }) -}
eb7b02e57a57230c97de0244101eb114
  $fOrdValue_$c<= :: Common.Value -> Common.Value -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Common.Value) (b :: Common.Value) ->
                 case a of x6 { DEFAULT ->
                 case b of x7 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<=#
                      (GHC.Prim.dataToTag# @ Common.Value x6)
                      (GHC.Prim.dataToTag# @ Common.Value x7)) } }) -}
eb7b02e57a57230c97de0244101eb114
  $fOrdValue_$c> :: Common.Value -> Common.Value -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Common.Value) (b :: Common.Value) ->
                 case a of x6 { DEFAULT ->
                 case b of x7 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>#
                      (GHC.Prim.dataToTag# @ Common.Value x6)
                      (GHC.Prim.dataToTag# @ Common.Value x7)) } }) -}
eb7b02e57a57230c97de0244101eb114
  $fOrdValue_$c>= :: Common.Value -> Common.Value -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Common.Value) (b :: Common.Value) ->
                 case a of x6 { DEFAULT ->
                 case b of x7 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>=#
                      (GHC.Prim.dataToTag# @ Common.Value x6)
                      (GHC.Prim.dataToTag# @ Common.Value x7)) } }) -}
eb7b02e57a57230c97de0244101eb114
  $fOrdValue_$ccompare ::
    Common.Value -> Common.Value -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Common.Value) (b :: Common.Value) ->
                 case a of x6 { DEFAULT ->
                 case b of x7 { DEFAULT ->
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value x7
                 } in
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value x6
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                   GHC.Types.True -> GHC.Types.LT } } }) -}
eb7b02e57a57230c97de0244101eb114
  $fOrdValue_$cmax :: Common.Value -> Common.Value -> Common.Value
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x6 :: Common.Value) (y :: Common.Value) ->
                 case x6 of x7 { DEFAULT ->
                 case y of x8 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ Common.Value x7)
                           (GHC.Prim.dataToTag# @ Common.Value x8)) of wild {
                   GHC.Types.False -> x7 GHC.Types.True -> x8 } } }) -}
eb7b02e57a57230c97de0244101eb114
  $fOrdValue_$cmin :: Common.Value -> Common.Value -> Common.Value
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x6 :: Common.Value) (y :: Common.Value) ->
                 case x6 of x7 { DEFAULT ->
                 case y of x8 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ Common.Value x7)
                           (GHC.Prim.dataToTag# @ Common.Value x8)) of wild {
                   GHC.Types.False -> x8 GHC.Types.True -> x7 } } }) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction :: GHC.Read.Read Common.Action
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Action
                  Common.$fReadAction_$creadsPrec
                  Common.$fReadAction_$creadList
                  Common.$fReadAction_$creadPrec
                  Common.$fReadAction_$creadListPrec -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Common.Action] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Common.Action] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Common.Action
                   Common.$fReadAction2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Common.Action>_R))
                   @ b
                   eta1) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)
                   Common.$fReadAction11
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec Common.Action))) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)
  {- Strictness: m,
     Unfolding: ((Common.$fReadAction13,
                  Common.$fReadAction12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Action>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Action>_R))))) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Action -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Action -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.AttackWildDraw4) -}
427b0ea2583b55f7faa13d4707cec8db
  $fReadAction13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AttackWildDraw4"#) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)
  {- Strictness: m,
     Unfolding: ((Common.$fReadAction16,
                  Common.$fReadAction15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Action>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Action>_R))))) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Action -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Action -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.AttackDraw2) -}
1a9ced6b3efa1809816546d137286ae5
  $fReadAction16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AttackDraw2"#) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)
  {- Strictness: m,
     Unfolding: ((Common.$fReadAction19,
                  Common.$fReadAction18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Action>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Action>_R))))) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Action -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Action -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.AttackSkip) -}
e1aff893786ad62dea73b20fa1d627b9
  $fReadAction19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AttackSkip"#) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Common.Action
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Common.Action
                   Common.$fReadAction3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Common.Action>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Common.Action>_R)))) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)
  {- Strictness: m,
     Unfolding: ((Common.$fReadAction22,
                  Common.$fReadAction21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Action>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Action>_R))))) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Action -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Action -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.AttackReverse) -}
e2c2a20b7bac5c5cea594d1b152cf53c
  $fReadAction22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AttackReverse"#) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)
  {- Strictness: m,
     Unfolding: ((Common.$fReadAction25,
                  Common.$fReadAction24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Action>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Action>_R))))) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Action -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Action -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.EndTurn) -}
5a554cbc9d2156e79284c374940e92cf
  $fReadAction25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EndTurn"#) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)
  {- Strictness: m,
     Unfolding: ((Common.$fReadAction28,
                  Common.$fReadAction27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Action>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Action>_R))))) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Action -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Action -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.TakeFromDeck) -}
d3286da864badc19f107b603ffe423a2
  $fReadAction28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TakeFromDeck"#) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)
  {- Strictness: m,
     Unfolding: ((Common.$fReadAction31,
                  Common.$fReadAction30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Action>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Action>_R))))) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Action -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: Common.Action -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ Common.Action
                   Common.$fReadAction4
                   eta
                   @ b
                   eta1) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Action -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Action -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.UseCard) -}
9110604a7743bcd8dc5d18fe33867c75
  $fReadAction31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UseCard"#) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction32 :: Text.ParserCombinators.ReadP.P [Common.Action]
  {- Unfolding: (GHC.Read.$wlist
                   @ Common.Action
                   Common.$fReadAction2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Common.Action>_R))
                   @ [Common.Action]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Common.Action])) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)
                   Common.$fReadAction29
                   Common.$fReadAction5) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)
                   Common.$fReadAction26
                   Common.$fReadAction6) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)
                   Common.$fReadAction23
                   Common.$fReadAction7) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)
                   Common.$fReadAction20
                   Common.$fReadAction8) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)
                   Common.$fReadAction17
                   Common.$fReadAction9) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Action)
                   Common.$fReadAction14
                   Common.$fReadAction10) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Common.Action]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Common.Action]
                   Common.$fReadAction32) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Common.Action]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Common.$fReadAction1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Common.Action]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Common.Action]>_R))) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Common.Action
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Common.$fReadAction2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Common.Action>_R)) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fReadAction_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Common.Action
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Common.Action
                   ((GHC.Read.$fReadDouble10
                       @ Common.Action
                       Common.$fReadAction3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Common.Action>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Common.Action>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Common.Action>_R)
                      @ Common.Action
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Common.Action))) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack :: GHC.Read.Read Common.Attack
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Attack
                  Common.$fReadAttack_$creadsPrec
                  Common.$fReadAttack_$creadList
                  Common.$fReadAttack_$creadPrec
                  Common.$fReadAttack_$creadListPrec -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Common.Attack] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Common.Attack] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Common.Attack
                   Common.$fReadAttack2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Common.Attack>_R))
                   @ b
                   eta1) -}
82857d64ff2fea014238b58757c42a50
  $fReadAttack10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Draw4"#) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Attack)
  {- Strictness: m,
     Unfolding: ((Common.$fReadAttack13,
                  Common.$fReadAttack12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Attack>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Attack>_R))))) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Attack -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Attack -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.Draw2) -}
967ab3dca135da012cb2553bb65d2bbd
  $fReadAttack13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Draw2"#) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Attack)
  {- Strictness: m,
     Unfolding: ((Common.$fReadAttack16,
                  Common.$fReadAttack15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Attack>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Attack>_R))))) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Attack -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Attack -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.Skip) -}
d1c95b2c9c62af456132723f593a8ac4
  $fReadAttack16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Skip"#) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Attack)
  {- Strictness: m,
     Unfolding: ((Common.$fReadAttack19,
                  Common.$fReadAttack18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Attack>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Attack>_R))))) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Attack -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Attack -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.NoAttack) -}
a0d59d10868de61b050d8f9706dbbd07
  $fReadAttack19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoAttack"#) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Common.Attack
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Common.Attack
                   Common.$fReadAttack3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Common.Attack>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Common.Attack>_R)))) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack20 :: Text.ParserCombinators.ReadP.P [Common.Attack]
  {- Unfolding: (GHC.Read.$wlist
                   @ Common.Attack
                   Common.$fReadAttack2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Common.Attack>_R))
                   @ [Common.Attack]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Common.Attack])) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Attack -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: Common.Attack -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ Common.Attack
                   Common.$fReadAttack4
                   eta
                   @ b
                   eta1) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Attack)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Attack)
                   Common.$fReadAttack17
                   Common.$fReadAttack5) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Attack)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Attack)
                   Common.$fReadAttack14
                   Common.$fReadAttack6) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Attack)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Attack)
                   Common.$fReadAttack11
                   Common.$fReadAttack7) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Attack)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Attack)
                   Common.$fReadAttack8
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec Common.Attack))) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack8 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Attack)
  {- Strictness: m,
     Unfolding: ((Common.$fReadAttack10,
                  Common.$fReadAttack9
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Attack>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Attack>_R))))) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Attack -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Attack -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.Draw4) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Common.Attack]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Common.Attack]
                   Common.$fReadAttack20) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Common.Attack]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Common.$fReadAttack1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Common.Attack]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Common.Attack]>_R))) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Common.Attack
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Common.$fReadAttack2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Common.Attack>_R)) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fReadAttack_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Common.Attack
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Common.Attack
                   ((GHC.Read.$fReadDouble10
                       @ Common.Attack
                       Common.$fReadAttack3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Common.Attack>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Common.Attack>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Common.Attack>_R)
                      @ Common.Attack
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Common.Attack))) -}
ef5b9b5639d25aa2033e174052440b81
  $fReadCard :: GHC.Read.Read Common.Card
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Card
                  Common.$fReadCard_$creadsPrec
                  Common.$fReadCard_$creadList
                  Common.$fReadCard_$creadPrec
                  Common.$fReadCard_$creadListPrec -}
ef5b9b5639d25aa2033e174052440b81
  $fReadCard1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Common.Card] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Common.Card] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Common.Card
                   Common.$fReadCard2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Common.Card>_R))
                   @ b
                   eta1) -}
ef5b9b5639d25aa2033e174052440b81
  $fReadCard2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Common.Card
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Common.Card
                   Common.$fReadCard3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Common.Card>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Common.Card>_R)))) -}
ef5b9b5639d25aa2033e174052440b81
  $fReadCard3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Card -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Common.Card -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Common.$w$creadPrec ww1 @ b w1 }) -}
ef5b9b5639d25aa2033e174052440b81
  $fReadCard4 :: Text.ParserCombinators.ReadP.P [Common.Card]
  {- Unfolding: (GHC.Read.$wlist
                   @ Common.Card
                   Common.$fReadCard2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Common.Card>_R))
                   @ [Common.Card]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Common.Card])) -}
ef5b9b5639d25aa2033e174052440b81
  $fReadCard_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Common.Card]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Common.Card]
                   Common.$fReadCard4) -}
ef5b9b5639d25aa2033e174052440b81
  $fReadCard_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Common.Card]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Common.$fReadCard1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Common.Card]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Common.Card]>_R))) -}
ef5b9b5639d25aa2033e174052440b81
  $fReadCard_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Common.Card
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Common.$fReadCard2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Common.Card>_R)) -}
ef5b9b5639d25aa2033e174052440b81
  $fReadCard_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Common.Card
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Common.Card
                   ((GHC.Read.$fReadDouble10
                       @ Common.Card
                       Common.$fReadCard3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Common.Card>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Common.Card>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Common.Card>_R)
                      @ Common.Card
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Common.Card))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue :: GHC.Read.Read Common.Value
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Value
                  Common.$fReadValue_$creadsPrec
                  Common.$fReadValue_$creadList
                  Common.$fReadValue_$creadPrec
                  Common.$fReadValue_$creadListPrec -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Common.Value] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Common.Value] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Common.Value
                   Common.$fReadValue2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Common.Value>_R))
                   @ b
                   eta1) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
                   Common.$fReadValue47
                   Common.$fReadValue11) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
                   Common.$fReadValue44
                   Common.$fReadValue12) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
                   Common.$fReadValue41
                   Common.$fReadValue13) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
                   Common.$fReadValue38
                   Common.$fReadValue14) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
                   Common.$fReadValue35
                   Common.$fReadValue15) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue15 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
                   Common.$fReadValue32
                   Common.$fReadValue16) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue16 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
                   Common.$fReadValue29
                   Common.$fReadValue17) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue17 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
                   Common.$fReadValue26
                   Common.$fReadValue18) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue18 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
                   Common.$fReadValue23
                   Common.$fReadValue19) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue19 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
                   Common.$fReadValue20
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec Common.Value))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Common.Value
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Common.Value
                   Common.$fReadValue3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Common.Value>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Common.Value>_R)))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
  {- Strictness: m,
     Unfolding: ((Common.$fReadValue22,
                  Common.$fReadValue21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Value>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Value>_R))))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.Dummy) -}
e8ba249fbaca0bdbade64df98042e743
  $fReadValue22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Dummy"#) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
  {- Strictness: m,
     Unfolding: ((Common.$fReadValue25,
                  Common.$fReadValue24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Value>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Value>_R))))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.ChCol) -}
f093ed0f2b9ee4842dff2e8d2478ce9b
  $fReadValue25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ChCol"#) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
  {- Strictness: m,
     Unfolding: ((Common.$fReadValue28,
                  Common.$fReadValue27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Value>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Value>_R))))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.Plus4) -}
e2a1bed3173d88feeb443dacb3a08e17
  $fReadValue28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Plus4"#) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
  {- Strictness: m,
     Unfolding: ((Common.$fReadValue31,
                  Common.$fReadValue30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Value>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Value>_R))))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ Common.Value
                   Common.$fReadValue4
                   eta
                   @ b
                   eta1) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.ChDir) -}
b18fe3d623103c4efc3796a1047784b7
  $fReadValue31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ChDir"#) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
  {- Strictness: m,
     Unfolding: ((Common.$fReadValue34,
                  Common.$fReadValue33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Value>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Value>_R))))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.Stop) -}
3420c083a8a32d3609858f6cb09229eb
  $fReadValue34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Stop"#) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
  {- Strictness: m,
     Unfolding: ((Common.$fReadValue37,
                  Common.$fReadValue36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Value>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Value>_R))))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.Plus2) -}
a8995ed2c0c825c50d9345b7e5236bc6
  $fReadValue37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Plus2"#) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
  {- Strictness: m,
     Unfolding: ((Common.$fReadValue40,
                  Common.$fReadValue39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Value>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Value>_R))))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.Nine) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
                   Common.$fReadValue65
                   Common.$fReadValue5) -}
44316134a114f2dc5a19333f1a55a4a3
  $fReadValue40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Nine"#) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
  {- Strictness: m,
     Unfolding: ((Common.$fReadValue43,
                  Common.$fReadValue42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Value>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Value>_R))))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.Eight) -}
b537bf599b786b806ad8be2a0cbdc349
  $fReadValue43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Eight"#) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue44 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
  {- Strictness: m,
     Unfolding: ((Common.$fReadValue46,
                  Common.$fReadValue45
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Value>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Value>_R))))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue45 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.Seven) -}
99bbf49ff246b845c67fc754bcc08a2b
  $fReadValue46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Seven"#) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue47 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
  {- Strictness: m,
     Unfolding: ((Common.$fReadValue49,
                  Common.$fReadValue48
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Value>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Value>_R))))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue48 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.Six) -}
a012f7db2bf350663d70ae978c59165d
  $fReadValue49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Six"#) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
                   Common.$fReadValue62
                   Common.$fReadValue6) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue50 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
  {- Strictness: m,
     Unfolding: ((Common.$fReadValue52,
                  Common.$fReadValue51
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Value>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Value>_R))))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue51 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.Five) -}
e355ea218deff7f739604942035b13b7
  $fReadValue52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Five"#) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue53 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
  {- Strictness: m,
     Unfolding: ((Common.$fReadValue55,
                  Common.$fReadValue54
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Value>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Value>_R))))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue54 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.Four) -}
e6136d40999bf16fe8215c6105e69249
  $fReadValue55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Four"#) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue56 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
  {- Strictness: m,
     Unfolding: ((Common.$fReadValue58,
                  Common.$fReadValue57
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Value>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Value>_R))))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue57 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.Three) -}
1140221fa9ed58ff08ebbf766f540869
  $fReadValue58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Three"#) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue59 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
  {- Strictness: m,
     Unfolding: ((Common.$fReadValue61,
                  Common.$fReadValue60
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Value>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Value>_R))))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
                   Common.$fReadValue59
                   Common.$fReadValue7) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue60 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.Two) -}
d2326cc8c1bd4e877707d6585d5a94c6
  $fReadValue61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Two"#) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue62 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
  {- Strictness: m,
     Unfolding: ((Common.$fReadValue64,
                  Common.$fReadValue63
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Value>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Value>_R))))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue63 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.One) -}
8e57cd76cd718b7e87ce239fc6345d90
  $fReadValue64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "One"#) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue65 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
  {- Strictness: m,
     Unfolding: ((Common.$fReadValue67,
                  Common.$fReadValue66
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Common.Value>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Common.Value>_R))))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue66 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Common.Value -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Common.Value -> Text.ParserCombinators.ReadP.P b) ->
                 eta Common.Zero) -}
9f32f1fe811cb3bebab103d6c5cab433
  $fReadValue67 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Zero"#) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue68 :: Text.ParserCombinators.ReadP.P [Common.Value]
  {- Unfolding: (GHC.Read.$wlist
                   @ Common.Value
                   Common.$fReadValue2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Common.Value>_R))
                   @ [Common.Value]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Common.Value])) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
                   Common.$fReadValue56
                   Common.$fReadValue8) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
                   Common.$fReadValue53
                   Common.$fReadValue9) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Common.Value)
                   Common.$fReadValue50
                   Common.$fReadValue10) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Common.Value]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Common.Value]
                   Common.$fReadValue68) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Common.Value]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Common.$fReadValue1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Common.Value]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Common.Value]>_R))) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Common.Value
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Common.$fReadValue2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Common.Value>_R)) -}
eb7b02e57a57230c97de0244101eb114
  $fReadValue_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Common.Value
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Common.Value
                   ((GHC.Read.$fReadDouble10
                       @ Common.Value
                       Common.$fReadValue3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Common.Value>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Common.Value>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Common.Value>_R)
                      @ Common.Value
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Common.Value))) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fShowAction :: GHC.Show.Show Common.Action
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Action
                  Common.$fShowAction_$cshowsPrec
                  Common.$fShowAction_$cshow
                  Common.$fShowAction_$cshowList -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fShowAction_$cshow :: Common.Action -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x6 :: Common.Action) ->
                 Common.$fShowAction_$cshowsPrec
                   GHC.Show.shows22
                   x6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fShowAction_$cshowList :: [Common.Action] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Common.Action
                   Common.$w$cshowsPrec) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $fShowAction_$cshowsPrec ::
    GHC.Types.Int -> Common.Action -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Common.Action)
                   (w2 :: GHC.Base.String) ->
                 Common.$w$cshowsPrec w1 w2) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fShowAttack :: GHC.Show.Show Common.Attack
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Attack
                  Common.$fShowAttack_$cshowsPrec
                  Common.$fShowAttack_$cshow
                  Common.$fShowAttack_$cshowList -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fShowAttack_$cshow :: Common.Attack -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x6 :: Common.Attack) ->
                 Common.$fShowAttack_$cshowsPrec
                   GHC.Show.shows22
                   x6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fShowAttack_$cshowList :: [Common.Attack] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Common.Attack
                   Common.$w$cshowsPrec1) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $fShowAttack_$cshowsPrec ::
    GHC.Types.Int -> Common.Attack -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Common.Attack)
                   (w2 :: GHC.Base.String) ->
                 Common.$w$cshowsPrec1 w1 w2) -}
ef5b9b5639d25aa2033e174052440b81
  $fShowCard :: GHC.Show.Show Common.Card
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Card
                  Common.$fShowCard_$cshowsPrec
                  Common.$fShowCard_$cshow
                  Common.$fShowCard_$cshowList -}
ef5b9b5639d25aa2033e174052440b81
  $fShowCard1 :: Common.Card -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x6 :: Common.Card)
                   (s :: GHC.Base.String)[OneShot] ->
                 case Common.$w$cshow x6 of ww { (#,#) ww1 ww2 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww1 ww2)
                   s }) -}
3b9308f0686a0362b8a041849b931abe
  $fShowCard2 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ef5b9b5639d25aa2033e174052440b81
  $fShowCard_$cshow :: Common.Card -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(1*U,U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Common.Card) ->
                 case Common.$w$cshow w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
ef5b9b5639d25aa2033e174052440b81
  $fShowCard_$cshowList :: [Common.Card] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Common.Card]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Common.Card Common.$fShowCard1 ls s) -}
ef5b9b5639d25aa2033e174052440b81
  $fShowCard_$cshowsPrec ::
    GHC.Types.Int -> Common.Card -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,1*U(1*U,U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x6 :: Common.Card)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c1
                      n
                      (Common.$fShowCard_$cshow x6))
                   s) -}
ceab6de2a9d9db59c8387f4e28ffb42e
  $fShowPlayer :: GHC.Show.Show Common.Player
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Player
                  Common.$fShowPlayer_$cshowsPrec
                  Common.$fShowPlayer_$cshow
                  Common.$fShowPlayer_$cshowList -}
ceab6de2a9d9db59c8387f4e28ffb42e
  $fShowPlayer1 :: Common.Player -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Common.Player) (w1 :: GHC.Base.String) ->
                 Common.$w$cshowsPrec3 0# w w1) -}
ceab6de2a9d9db59c8387f4e28ffb42e
  $fShowPlayer_$cshow :: Common.Player -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x6 :: Common.Player) ->
                 Common.$fShowPlayer_$cshowsPrec
                   GHC.Show.shows22
                   x6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ceab6de2a9d9db59c8387f4e28ffb42e
  $fShowPlayer_$cshowList :: [Common.Player] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Common.Player
                   Common.$fShowPlayer1) -}
ceab6de2a9d9db59c8387f4e28ffb42e
  $fShowPlayer_$cshowsPrec ::
    GHC.Types.Int -> Common.Player -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Common.Player)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Common.$w$cshowsPrec3 ww1 w1 w2 }) -}
eb7b02e57a57230c97de0244101eb114
  $fShowValue :: GHC.Show.Show Common.Value
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Common.Value
                  Common.$fShowValue_$cshowsPrec
                  Common.$fShowValue_$cshow
                  Common.$fShowValue_$cshowList -}
eb7b02e57a57230c97de0244101eb114
  $fShowValue_$cshow :: Common.Value -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x6 :: Common.Value) ->
                 Common.$fShowValue_$cshowsPrec
                   GHC.Show.shows22
                   x6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
eb7b02e57a57230c97de0244101eb114
  $fShowValue_$cshowList :: [Common.Value] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Common.Value
                   Common.$w$cshowsPrec2) -}
eb7b02e57a57230c97de0244101eb114
  $fShowValue_$cshowsPrec ::
    GHC.Types.Int -> Common.Value -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Common.Value)
                   (w2 :: GHC.Base.String) ->
                 Common.$w$cshowsPrec2 w1 w2) -}
6e36dc11816b64297fb2a8006de35608
  $tc'AiPlayer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5370691356932614477##
                   6453047921241522953##
                   Common.$trModule
                   Common.$tc'AiPlayer1) -}
84012821287e7774f4de69475bbb1e9f
  $tc'AiPlayer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AiPlayer"#) -}
fae386428889b608d1fd661369efe860
  $tc'AttackDraw1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AttackDraw2"#) -}
81b2b2dbb2685ab1176e5d0cb2a353c6
  $tc'AttackDraw2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17257586131510907921##
                   13600841012961852510##
                   Common.$trModule
                   Common.$tc'AttackDraw1) -}
882e61005769ee0bd7d815f5d0f879c8
  $tc'AttackReverse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16038479455372544863##
                   13336711069628098760##
                   Common.$trModule
                   Common.$tc'AttackReverse1) -}
95745a7113c1215f6cf1b40b0cfab16f
  $tc'AttackReverse1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AttackReverse"#) -}
a7b464247d068f588d9c554fa419bad0
  $tc'AttackSkip :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11128650020448349632##
                   2203561147505122737##
                   Common.$trModule
                   Common.$tc'AttackSkip1) -}
c44e64385c291c97db297b38bf38ec10
  $tc'AttackSkip1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AttackSkip"#) -}
1e09dca1b0768914144f3ce3dc69b3b2
  $tc'AttackWildDraw1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AttackWildDraw4"#) -}
2520d1a055d8ab336dd00aa0cf9b3359
  $tc'AttackWildDraw4 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5984394844101355839##
                   17008169673621512570##
                   Common.$trModule
                   Common.$tc'AttackWildDraw1) -}
3ac41a30ef7687e4aac5c3aa9f710347
  $tc'Card :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18313139156800050948##
                   13150253953722560636##
                   Common.$trModule
                   Common.$tc'Card1) -}
267ce7702d487b5e6cbc1532fef7d9d2
  $tc'Card1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Card"#) -}
5ebf8818e882b9eaf4c998327219d873
  $tc'ChCol :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14159280710301578977##
                   14548803975357766711##
                   Common.$trModule
                   Common.$tc'ChCol1) -}
82b1cffc336b1c2a78a708da3353e782
  $tc'ChCol1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ChCol"#) -}
4cb3d4cb1c4c04b980ce1187d7cb977e
  $tc'ChDir :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8911398203463506710##
                   11386873062619300725##
                   Common.$trModule
                   Common.$tc'ChDir1) -}
27ff7a3b0149bb8e1b3956617d0894e2
  $tc'ChDir1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ChDir"#) -}
df432154d05dd727291d8a19c9c3a7d6
  $tc'Draw1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Draw2"#) -}
99901944ba6c112ccc03aa99632ba6a5
  $tc'Draw2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11878803692843262731##
                   5480195489703678002##
                   Common.$trModule
                   Common.$tc'Draw1) -}
3a16c482e1b90c7f17b054230b1bf43d
  $tc'Draw3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Draw4"#) -}
de85e4b9395a609d6bc969b236989ee2
  $tc'Draw4 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   366564269860648351##
                   1939339343386039541##
                   Common.$trModule
                   Common.$tc'Draw3) -}
59453adb412258931df6d66153492b56
  $tc'Dummy :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1606341566194214757##
                   7336449314005008567##
                   Common.$trModule
                   Common.$tc'Dummy1) -}
055900e9429226dc6769038c25b49fa7
  $tc'Dummy1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Dummy"#) -}
61cf3f7bd37f84df7a0ff5df5b6eef15
  $tc'Eight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11179103647482616260##
                   10256021974039794947##
                   Common.$trModule
                   Common.$tc'Eight1) -}
b50444553f975cae885cd5a4e53d7d4a
  $tc'Eight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Eight"#) -}
9aa2246f177e79dfb73e1a76b444c557
  $tc'EndTurn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16662811863449371165##
                   7965974083935154693##
                   Common.$trModule
                   Common.$tc'EndTurn1) -}
4d5671655e2cfa256db374e8bfe83d09
  $tc'EndTurn1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EndTurn"#) -}
4eba921f2667e2652df1fa0c20b9848c
  $tc'Five :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5676883645677483312##
                   8786537328868352877##
                   Common.$trModule
                   Common.$tc'Five1) -}
7ae71841fe999b2b0683076fa0b9e822
  $tc'Five1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Five"#) -}
e46b747d9dc9e9a86540d09427a51bbf
  $tc'Four :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13273397322171928449##
                   15369887194528792662##
                   Common.$trModule
                   Common.$tc'Four1) -}
c3b877b516092dcb34c079e15631562d
  $tc'Four1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Four"#) -}
6d51d318b92bf3aacb5790b46ae18180
  $tc'HPlayer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6194852067040354040##
                   12777636141879038874##
                   Common.$trModule
                   Common.$tc'HPlayer1) -}
970813bdc93c1ef63e34be75b701305f
  $tc'HPlayer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'HPlayer"#) -}
3dfc828006a19bc50cab8d705dcb9f37
  $tc'Nine :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7696047584746754334##
                   12417655678992066865##
                   Common.$trModule
                   Common.$tc'Nine1) -}
9759934298b50b66714f7ebff3973a3a
  $tc'Nine1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Nine"#) -}
60df15ddda3021f3525ad57e03918a13
  $tc'NoAttack :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6102984901239454261##
                   8697689533065984492##
                   Common.$trModule
                   Common.$tc'NoAttack1) -}
d3aede19ce1cd6e5700967e96bb076eb
  $tc'NoAttack1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NoAttack"#) -}
70b6a772be79f584a34c2bcf343bd726
  $tc'NoPlayer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5501733783939250890##
                   5302786317199681936##
                   Common.$trModule
                   Common.$tc'NoPlayer1) -}
9063da8324cf54070d0491a170a13534
  $tc'NoPlayer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NoPlayer"#) -}
b746efd9b863c78a6f09ad9db54e4ce2
  $tc'One :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9116416682482749210##
                   2404948729648010702##
                   Common.$trModule
                   Common.$tc'One1) -}
4f9e0c60791e42f8dbcbe25f0cfa4b82
  $tc'One1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'One"#) -}
c858cb842dee177d8f920332d8936405
  $tc'Plus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Plus2"#) -}
6159f4084ee1fb025d8b2f8e7de6ad70
  $tc'Plus2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7829742809974991557##
                   12603893394236345176##
                   Common.$trModule
                   Common.$tc'Plus1) -}
821ddfff57a2ce815f0b79050002ff87
  $tc'Plus3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Plus4"#) -}
359e0df3f894cb8ccda4f5961bf1344c
  $tc'Plus4 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8374791714156956855##
                   6403679338013735436##
                   Common.$trModule
                   Common.$tc'Plus3) -}
605cd0cdc084318373872820b69bf899
  $tc'Seven :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1207151789389244323##
                   12685016899059786583##
                   Common.$trModule
                   Common.$tc'Seven1) -}
722de16e504a23ad295b85b063db557f
  $tc'Seven1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Seven"#) -}
8ecd72d19d29b982e2a5fbc0bef9f0c4
  $tc'Six :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1735511570198860808##
                   2211872751725082553##
                   Common.$trModule
                   Common.$tc'Six1) -}
81375d2ff6598186c74eb1395326c5e7
  $tc'Six1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Six"#) -}
a11ad7084778014e37ea4059dea8e209
  $tc'Skip :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1311836893987301346##
                   15001906938441411634##
                   Common.$trModule
                   Common.$tc'Skip1) -}
a80f5f50f86a5ed731571db9f765971e
  $tc'Skip1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Skip"#) -}
82c5236b7713d697fae6457f4791c26f
  $tc'State :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10971886935925446399##
                   16874013075582246488##
                   Common.$trModule
                   Common.$tc'State1) -}
dfdc2270cd846992524553992be49fb6
  $tc'State1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'State"#) -}
8ca55ce883a9cb5446563d82421c765c
  $tc'Stop :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4041501319522170458##
                   1491348435722211010##
                   Common.$trModule
                   Common.$tc'Stop1) -}
87d270e14fdad4b7a73e8e7ae0eef6b1
  $tc'Stop1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Stop"#) -}
85953625bb4c25b263fd83cd10fd7ffa
  $tc'TakeFromDeck :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12054690399985536718##
                   2891311148068177816##
                   Common.$trModule
                   Common.$tc'TakeFromDeck1) -}
ec6cda1020dd42ef67a0a6c26f5fa26c
  $tc'TakeFromDeck1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TakeFromDeck"#) -}
16b7589578f5ed0acf6892575a4b54e2
  $tc'Three :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2696485060445213673##
                   5085249923264100472##
                   Common.$trModule
                   Common.$tc'Three1) -}
b5060d33d83686d87a26e50a0d76a771
  $tc'Three1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Three"#) -}
fe74a70e1515bc91c6aaa58968acb8e9
  $tc'Two :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13615863005079500132##
                   5766289554313742617##
                   Common.$trModule
                   Common.$tc'Two1) -}
7108fcb31891bbb15ae9b3fa9e8d66dc
  $tc'Two1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Two"#) -}
f6ac31d80c8e4ca14f965dc6b508688a
  $tc'UseCard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   258739129170680672##
                   84695810888571136##
                   Common.$trModule
                   Common.$tc'UseCard1) -}
84968414a176a4a2f3931c2f95e585b8
  $tc'UseCard1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UseCard"#) -}
4217df815e236be966fcd4969bcd9fd0
  $tc'Zero :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17774183348192698066##
                   5810810660254188462##
                   Common.$trModule
                   Common.$tc'Zero1) -}
9eee50bacef5d46e0065cf1c52396677
  $tc'Zero1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Zero"#) -}
4cc6217759752d7a4c66ba51b8fca5e9
  $tcAction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10135138529421835663##
                   3909731714550830147##
                   Common.$trModule
                   Common.$tcAction1) -}
35dbf66fbabcb6d4d4f2397b2050ffca
  $tcAction1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Action"#) -}
32853894a3dd0e2bd00d3b61fd718f45
  $tcAttack :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13635896724193809715##
                   4709480358483349368##
                   Common.$trModule
                   Common.$tcAttack1) -}
17c4be2e93e764cb8db9251379eecf11
  $tcAttack1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Attack"#) -}
aae887e4f91d728b98f10b918ef89840
  $tcCard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7266217380095337884##
                   4322247310197617635##
                   Common.$trModule
                   Common.$tcCard1) -}
38258a3b7487abf03abbace1a8280e65
  $tcCard1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Card"#) -}
10e337e821ed23e1b5d9b1552158d2e1
  $tcPlayer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8286426758633148995##
                   14434918806886553339##
                   Common.$trModule
                   Common.$tcPlayer1) -}
99e3409d9eddcc1b3f74bfdd705a702c
  $tcPlayer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Player"#) -}
8309c26bde8c25a5f22154b442ea77c3
  $tcState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3932908160635547116##
                   14737742812932461284##
                   Common.$trModule
                   Common.$tcState1) -}
57466256cef42a18af7780e955ab7940
  $tcState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "State"#) -}
c4ae1faa6188c171300398b902c76c2a
  $tcValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4397755531385880518##
                   17804106153265438623##
                   Common.$trModule
                   Common.$tcValue1) -}
3c8e1c57b68d8e4eaf25d8bf959f9bfc
  $tcValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Value"#) -}
95ec87a3185ac3507c5a9891503bc68e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Common.$trModule2
                   Common.$trModule1) -}
fd4d124c48560bc8514cfa1d24b95750
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Common"#) -}
1f93a026045f9d4d5e33ce0a579d5290
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
4033527b67279800ce833af1614090b4
  $w$c== ::
    System.Console.ANSI.Common.Color
    -> Common.Value
    -> System.Console.ANSI.Common.Color
    -> Common.Value
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: System.Console.ANSI.Common.Color)
                   (ww1 :: Common.Value)
                   (ww2 :: System.Console.ANSI.Common.Color)
                   (ww3 :: Common.Value) ->
                 case ww of wild {
                   System.Console.ANSI.Common.Black
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        System.Console.ANSI.Common.Black
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==#
                                (GHC.Prim.dataToTag# @ Common.Value ww1)
                                (GHC.Prim.dataToTag# @ Common.Value ww3)) }
                   System.Console.ANSI.Common.Red
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        System.Console.ANSI.Common.Red
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==#
                                (GHC.Prim.dataToTag# @ Common.Value ww1)
                                (GHC.Prim.dataToTag# @ Common.Value ww3)) }
                   System.Console.ANSI.Common.Green
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        System.Console.ANSI.Common.Green
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==#
                                (GHC.Prim.dataToTag# @ Common.Value ww1)
                                (GHC.Prim.dataToTag# @ Common.Value ww3)) }
                   System.Console.ANSI.Common.Yellow
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        System.Console.ANSI.Common.Yellow
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==#
                                (GHC.Prim.dataToTag# @ Common.Value ww1)
                                (GHC.Prim.dataToTag# @ Common.Value ww3)) }
                   System.Console.ANSI.Common.Blue
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        System.Console.ANSI.Common.Blue
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==#
                                (GHC.Prim.dataToTag# @ Common.Value ww1)
                                (GHC.Prim.dataToTag# @ Common.Value ww3)) }
                   System.Console.ANSI.Common.Magenta
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        System.Console.ANSI.Common.Magenta
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==#
                                (GHC.Prim.dataToTag# @ Common.Value ww1)
                                (GHC.Prim.dataToTag# @ Common.Value ww3)) }
                   System.Console.ANSI.Common.Cyan
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        System.Console.ANSI.Common.Cyan
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==#
                                (GHC.Prim.dataToTag# @ Common.Value ww1)
                                (GHC.Prim.dataToTag# @ Common.Value ww3)) }
                   System.Console.ANSI.Common.White
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        System.Console.ANSI.Common.White
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==#
                                (GHC.Prim.dataToTag# @ Common.Value ww1)
                                (GHC.Prim.dataToTag# @ Common.Value ww3)) } }) -}
17a0afa8348464c3687a0354ac4bd140
  $w$ccompare ::
    System.Console.ANSI.Common.Color
    -> Common.Value
    -> System.Console.ANSI.Common.Color
    -> Common.Value
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: System.Console.ANSI.Common.Color)
                   (ww1 :: Common.Value)
                   (ww2 :: System.Console.ANSI.Common.Color)
                   (ww3 :: Common.Value) ->
                 case ww of wild {
                   System.Console.ANSI.Common.Black
                   -> case ww2 of wild1 {
                        System.Console.ANSI.Common.Black
                        -> let {
                             a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value ww1
                           } in
                           let {
                             b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value ww3
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild3 {
                                  GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                             GHC.Types.True -> GHC.Types.LT }
                        System.Console.ANSI.Common.Red -> GHC.Types.LT
                        System.Console.ANSI.Common.Green -> GHC.Types.LT
                        System.Console.ANSI.Common.Yellow -> GHC.Types.LT
                        System.Console.ANSI.Common.Blue -> GHC.Types.LT
                        System.Console.ANSI.Common.Magenta -> GHC.Types.LT
                        System.Console.ANSI.Common.Cyan -> GHC.Types.LT
                        System.Console.ANSI.Common.White -> GHC.Types.LT }
                   System.Console.ANSI.Common.Red
                   -> case ww2 of wild1 {
                        System.Console.ANSI.Common.Black -> GHC.Types.GT
                        System.Console.ANSI.Common.Red
                        -> let {
                             a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value ww1
                           } in
                           let {
                             b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value ww3
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild3 {
                                  GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                             GHC.Types.True -> GHC.Types.LT }
                        System.Console.ANSI.Common.Green -> GHC.Types.LT
                        System.Console.ANSI.Common.Yellow -> GHC.Types.LT
                        System.Console.ANSI.Common.Blue -> GHC.Types.LT
                        System.Console.ANSI.Common.Magenta -> GHC.Types.LT
                        System.Console.ANSI.Common.Cyan -> GHC.Types.LT
                        System.Console.ANSI.Common.White -> GHC.Types.LT }
                   System.Console.ANSI.Common.Green
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.GT
                        System.Console.ANSI.Common.Green
                        -> let {
                             a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value ww1
                           } in
                           let {
                             b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value ww3
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild3 {
                                  GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                             GHC.Types.True -> GHC.Types.LT }
                        System.Console.ANSI.Common.Yellow -> GHC.Types.LT
                        System.Console.ANSI.Common.Blue -> GHC.Types.LT
                        System.Console.ANSI.Common.Magenta -> GHC.Types.LT
                        System.Console.ANSI.Common.Cyan -> GHC.Types.LT
                        System.Console.ANSI.Common.White -> GHC.Types.LT }
                   System.Console.ANSI.Common.Yellow
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.GT
                        System.Console.ANSI.Common.Yellow
                        -> let {
                             a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value ww1
                           } in
                           let {
                             b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value ww3
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild3 {
                                  GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                             GHC.Types.True -> GHC.Types.LT }
                        System.Console.ANSI.Common.Blue -> GHC.Types.LT
                        System.Console.ANSI.Common.Magenta -> GHC.Types.LT
                        System.Console.ANSI.Common.Cyan -> GHC.Types.LT
                        System.Console.ANSI.Common.White -> GHC.Types.LT }
                   System.Console.ANSI.Common.Blue
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.GT
                        System.Console.ANSI.Common.Blue
                        -> let {
                             a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value ww1
                           } in
                           let {
                             b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value ww3
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild3 {
                                  GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                             GHC.Types.True -> GHC.Types.LT }
                        System.Console.ANSI.Common.Magenta -> GHC.Types.LT
                        System.Console.ANSI.Common.Cyan -> GHC.Types.LT
                        System.Console.ANSI.Common.White -> GHC.Types.LT }
                   System.Console.ANSI.Common.Magenta
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.GT
                        System.Console.ANSI.Common.Magenta
                        -> let {
                             a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value ww1
                           } in
                           let {
                             b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value ww3
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild3 {
                                  GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                             GHC.Types.True -> GHC.Types.LT }
                        System.Console.ANSI.Common.Cyan -> GHC.Types.LT
                        System.Console.ANSI.Common.White -> GHC.Types.LT }
                   System.Console.ANSI.Common.Cyan
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.GT
                        System.Console.ANSI.Common.Cyan
                        -> let {
                             a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value ww1
                           } in
                           let {
                             b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value ww3
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild3 {
                                  GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                             GHC.Types.True -> GHC.Types.LT }
                        System.Console.ANSI.Common.White -> GHC.Types.LT }
                   System.Console.ANSI.Common.White
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.GT
                        System.Console.ANSI.Common.White
                        -> let {
                             a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value ww1
                           } in
                           let {
                             b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Common.Value ww3
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild3 {
                                  GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                             GHC.Types.True -> GHC.Types.LT } } }) -}
ef5b9b5639d25aa2033e174052440b81
  $w$cenumFrom ::
    System.Console.ANSI.Common.Color -> Common.Value -> [Common.Card]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: System.Console.ANSI.Common.Color)
                   (ww1 :: Common.Value) ->
                 case ww of wild {
                   System.Console.ANSI.Common.Black
                   -> Common.$fEnumCard_go
                        (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                   System.Console.ANSI.Common.Red
                   -> Common.$fEnumCard_go
                        (GHC.Prim.+#
                           (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                           1#)
                   System.Console.ANSI.Common.Green
                   -> Common.$fEnumCard_go
                        (GHC.Prim.+#
                           (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                           2#)
                   System.Console.ANSI.Common.Yellow
                   -> Common.$fEnumCard_go
                        (GHC.Prim.+#
                           (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                           3#)
                   System.Console.ANSI.Common.Blue
                   -> Common.$fEnumCard_go
                        (GHC.Prim.+#
                           (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                           4#)
                   System.Console.ANSI.Common.Magenta
                   -> Common.$fEnumCard_go
                        (GHC.Prim.+#
                           (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                           5#)
                   System.Console.ANSI.Common.Cyan
                   -> Common.$fEnumCard_go
                        (GHC.Prim.+#
                           (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                           6#)
                   System.Console.ANSI.Common.White
                   -> Common.$fEnumCard_go
                        (GHC.Prim.+#
                           (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                           7#) }) -}
ef5b9b5639d25aa2033e174052440b81
  $w$cenumFromThen ::
    System.Console.ANSI.Common.Color
    -> Common.Value
    -> System.Console.ANSI.Common.Color
    -> Common.Value
    -> [Common.Card]
  {- Arity: 4, Strictness: <S,1*U><S,1*U><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: System.Console.ANSI.Common.Color)
                   (ww1 :: Common.Value)
                   (ww2 :: System.Console.ANSI.Common.Color)
                   (ww3 :: Common.Value) ->
                 let {
                   $j :: GHC.Prim.Int# -> [Common.Card]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (y :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [Common.Card]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (y1 :: GHC.Prim.Int#)[OneShot] ->
                         let {
                           x6 :: GHC.Prim.Int#
                           = GHC.Prim.+#
                               (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                               y
                         } in
                         let {
                           x7 :: GHC.Prim.Int#
                           = GHC.Prim.+#
                               (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww3) 5#)
                               y1
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.>=# x7 x6) of wild {
                           GHC.Types.False
                           -> GHC.Base.map
                                @ GHC.Types.Int
                                @ Common.Card
                                Common.$fEnumCard_$ctoEnum
                                (GHC.Enum.efdtIntDn x6 x7 -9223372036854775808#)
                           GHC.Types.True
                           -> GHC.Base.map
                                @ GHC.Types.Int
                                @ Common.Card
                                Common.$fEnumCard_$ctoEnum
                                (GHC.Enum.efdtIntUp x6 x7 9223372036854775807#) }
                     } in
                     case ww2 of wild {
                       System.Console.ANSI.Common.Black -> $j1 0#
                       System.Console.ANSI.Common.Red -> $j1 1#
                       System.Console.ANSI.Common.Green -> $j1 2#
                       System.Console.ANSI.Common.Yellow -> $j1 3#
                       System.Console.ANSI.Common.Blue -> $j1 4#
                       System.Console.ANSI.Common.Magenta -> $j1 5#
                       System.Console.ANSI.Common.Cyan -> $j1 6#
                       System.Console.ANSI.Common.White -> $j1 7# }
                 } in
                 case ww of wild {
                   System.Console.ANSI.Common.Black -> $j 0#
                   System.Console.ANSI.Common.Red -> $j 1#
                   System.Console.ANSI.Common.Green -> $j 2#
                   System.Console.ANSI.Common.Yellow -> $j 3#
                   System.Console.ANSI.Common.Blue -> $j 4#
                   System.Console.ANSI.Common.Magenta -> $j 5#
                   System.Console.ANSI.Common.Cyan -> $j 6#
                   System.Console.ANSI.Common.White -> $j 7# }) -}
ef5b9b5639d25aa2033e174052440b81
  $w$cenumFromThenTo ::
    System.Console.ANSI.Common.Color
    -> Common.Value
    -> System.Console.ANSI.Common.Color
    -> Common.Value
    -> System.Console.ANSI.Common.Color
    -> Common.Value
    -> [Common.Card]
  {- Arity: 6,
     Strictness: <S,1*U><S,1*U><S,1*U><S,1*U><S,1*U><S,1*U>,
     Inline: [0] -}
ef5b9b5639d25aa2033e174052440b81
  $w$cenumFromTo ::
    System.Console.ANSI.Common.Color
    -> Common.Value
    -> System.Console.ANSI.Common.Color
    -> Common.Value
    -> [Common.Card]
  {- Arity: 4, Strictness: <S,1*U><S,1*U><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: System.Console.ANSI.Common.Color)
                   (ww1 :: Common.Value)
                   (ww2 :: System.Console.ANSI.Common.Color)
                   (ww3 :: Common.Value) ->
                 let {
                   $j :: GHC.Prim.Int# -> [Common.Card]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (y :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [Common.Card]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (y1 :: GHC.Prim.Int#)[OneShot] ->
                         let {
                           x0 :: GHC.Prim.Int#
                           = GHC.Prim.+#
                               (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                               y
                         } in
                         let {
                           y2 :: GHC.Prim.Int#
                           = GHC.Prim.+#
                               (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww3) 5#)
                               y1
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># x0 y2) of wild {
                           GHC.Types.False
                           -> letrec {
                                go3 :: GHC.Prim.Int# -> [Common.Card]
                                  {- Arity: 1, Strictness: <L,U> -}
                                = \ (x6 :: GHC.Prim.Int#) ->
                                  GHC.Types.:
                                    @ Common.Card
                                    (case Common.$w$ctoEnum
                                            (GHC.Types.I# x6) of ww4 { (#,#) ww5 ww6 ->
                                     Common.Card ww5 ww6 })
                                    (case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==# x6 y2) of wild1 {
                                       GHC.Types.False -> go3 (GHC.Prim.+# x6 1#)
                                       GHC.Types.True -> GHC.Types.[] @ Common.Card })
                              } in
                              go3 x0
                           GHC.Types.True -> GHC.Types.[] @ Common.Card }
                     } in
                     case ww2 of wild {
                       System.Console.ANSI.Common.Black -> $j1 0#
                       System.Console.ANSI.Common.Red -> $j1 1#
                       System.Console.ANSI.Common.Green -> $j1 2#
                       System.Console.ANSI.Common.Yellow -> $j1 3#
                       System.Console.ANSI.Common.Blue -> $j1 4#
                       System.Console.ANSI.Common.Magenta -> $j1 5#
                       System.Console.ANSI.Common.Cyan -> $j1 6#
                       System.Console.ANSI.Common.White -> $j1 7# }
                 } in
                 case ww of wild {
                   System.Console.ANSI.Common.Black -> $j 0#
                   System.Console.ANSI.Common.Red -> $j 1#
                   System.Console.ANSI.Common.Green -> $j 2#
                   System.Console.ANSI.Common.Yellow -> $j 3#
                   System.Console.ANSI.Common.Blue -> $j 4#
                   System.Console.ANSI.Common.Magenta -> $j 5#
                   System.Console.ANSI.Common.Cyan -> $j 6#
                   System.Console.ANSI.Common.White -> $j 7# }) -}
55e30a92e3c68c242c22a34d4d48af5c
  $w$cfromEnum ::
    System.Console.ANSI.Common.Color -> Common.Value -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: System.Console.ANSI.Common.Color)
                   (ww1 :: Common.Value) ->
                 case ww of wild {
                   System.Console.ANSI.Common.Black
                   -> GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#
                   System.Console.ANSI.Common.Red
                   -> GHC.Prim.+#
                        (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                        1#
                   System.Console.ANSI.Common.Green
                   -> GHC.Prim.+#
                        (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                        2#
                   System.Console.ANSI.Common.Yellow
                   -> GHC.Prim.+#
                        (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                        3#
                   System.Console.ANSI.Common.Blue
                   -> GHC.Prim.+#
                        (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                        4#
                   System.Console.ANSI.Common.Magenta
                   -> GHC.Prim.+#
                        (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                        5#
                   System.Console.ANSI.Common.Cyan
                   -> GHC.Prim.+#
                        (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                        6#
                   System.Console.ANSI.Common.White
                   -> GHC.Prim.+#
                        (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ww1) 5#)
                        7# }) -}
ef5b9b5639d25aa2033e174052440b81
  $w$cpred ::
    Common.Card -> (# System.Console.ANSI.Common.Color, Common.Value #)
  {- Arity: 1, Strictness: <L,1*U(1*U,1*U)>, Inline: [0],
     Unfolding: (\ (w :: Common.Card) ->
                 Common.$w$ctoEnum
                   (case w of wild { Common.Card ds ds1 ->
                    case ds of wild1 {
                      System.Console.ANSI.Common.Black
                      -> GHC.Types.I#
                           (GHC.Prim.-#
                              (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ds1) 5#)
                              1#)
                      System.Console.ANSI.Common.Red
                      -> GHC.Types.I#
                           (GHC.Prim.-#
                              (GHC.Prim.+#
                                 (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ds1) 5#)
                                 1#)
                              1#)
                      System.Console.ANSI.Common.Green
                      -> GHC.Types.I#
                           (GHC.Prim.-#
                              (GHC.Prim.+#
                                 (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ds1) 5#)
                                 2#)
                              1#)
                      System.Console.ANSI.Common.Yellow
                      -> GHC.Types.I#
                           (GHC.Prim.-#
                              (GHC.Prim.+#
                                 (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ds1) 5#)
                                 3#)
                              1#)
                      System.Console.ANSI.Common.Blue
                      -> GHC.Types.I#
                           (GHC.Prim.-#
                              (GHC.Prim.+#
                                 (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ds1) 5#)
                                 4#)
                              1#)
                      System.Console.ANSI.Common.Magenta
                      -> GHC.Types.I#
                           (GHC.Prim.-#
                              (GHC.Prim.+#
                                 (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ds1) 5#)
                                 5#)
                              1#)
                      System.Console.ANSI.Common.Cyan
                      -> GHC.Types.I#
                           (GHC.Prim.-#
                              (GHC.Prim.+#
                                 (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ds1) 5#)
                                 6#)
                              1#)
                      System.Console.ANSI.Common.White
                      -> GHC.Types.I#
                           (GHC.Prim.-#
                              (GHC.Prim.+#
                                 (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ds1) 5#)
                                 7#)
                              1#) } })) -}
ef5b9b5639d25aa2033e174052440b81
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (Common.Card -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
ef5b9b5639d25aa2033e174052440b81
  $w$cshow :: Common.Card -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <L,1*U(1*U,U)>, Inline: [0],
     Unfolding: (\ (w :: Common.Card) ->
                 (# GHC.Show.shows9,
                    case w of wild { Common.Card ds ds1 ->
                    System.Console.ANSI.Common.$w$cshowsPrec1
                      ds
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.shows7
                         (GHC.Show.$fShow(,)_$sgo
                            Common.$fShowCard2
                            (\ (w1 :: GHC.Base.String) -> Common.$w$cshowsPrec2 ds1 w1)
                            (GHC.Types.[] @ GHC.Show.ShowS))) } #)) -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  $w$cshowsPrec ::
    Common.Action -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Common.Action) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Common.UseCard
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadAction31 w1
                   Common.TakeFromDeck
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadAction28 w1
                   Common.EndTurn
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadAction25 w1
                   Common.AttackReverse
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadAction22 w1
                   Common.AttackSkip
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadAction19 w1
                   Common.AttackDraw2
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadAction16 w1
                   Common.AttackWildDraw4
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadAction13 w1 }) -}
6dd5f8c9c8ee83aa0eafa03e07bde420
  $w$cshowsPrec1 ::
    Common.Attack -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Common.Attack) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Common.NoAttack
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadAttack19 w1
                   Common.Skip
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadAttack16 w1
                   Common.Draw2
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadAttack13 w1
                   Common.Draw4
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadAttack10 w1 }) -}
eb7b02e57a57230c97de0244101eb114
  $w$cshowsPrec2 ::
    Common.Value -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Common.Value) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Common.Zero -> GHC.Base.++ @ GHC.Types.Char Common.$fReadValue67 w1
                   Common.One -> GHC.Base.++ @ GHC.Types.Char Common.$fReadValue64 w1
                   Common.Two -> GHC.Base.++ @ GHC.Types.Char Common.$fReadValue61 w1
                   Common.Three
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadValue58 w1
                   Common.Four -> GHC.Base.++ @ GHC.Types.Char Common.$fReadValue55 w1
                   Common.Five -> GHC.Base.++ @ GHC.Types.Char Common.$fReadValue52 w1
                   Common.Six -> GHC.Base.++ @ GHC.Types.Char Common.$fReadValue49 w1
                   Common.Seven
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadValue46 w1
                   Common.Eight
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadValue43 w1
                   Common.Nine -> GHC.Base.++ @ GHC.Types.Char Common.$fReadValue40 w1
                   Common.Plus2
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadValue37 w1
                   Common.Stop -> GHC.Base.++ @ GHC.Types.Char Common.$fReadValue34 w1
                   Common.ChDir
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadValue31 w1
                   Common.Plus4
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadValue28 w1
                   Common.ChCol
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadValue25 w1
                   Common.Dummy
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fReadValue22 w1 }) -}
ceab6de2a9d9db59c8387f4e28ffb42e
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Common.Player -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
ef5b9b5639d25aa2033e174052440b81
  $w$csucc ::
    Common.Card -> (# System.Console.ANSI.Common.Color, Common.Value #)
  {- Arity: 1, Strictness: <L,1*U(1*U,1*U)>, Inline: [0],
     Unfolding: (\ (w :: Common.Card) ->
                 Common.$w$ctoEnum
                   (case w of wild { Common.Card ds ds1 ->
                    case ds of wild1 {
                      System.Console.ANSI.Common.Black
                      -> GHC.Types.I#
                           (GHC.Prim.+#
                              (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ds1) 5#)
                              1#)
                      System.Console.ANSI.Common.Red
                      -> GHC.Types.I#
                           (GHC.Prim.+#
                              (GHC.Prim.+#
                                 (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ds1) 5#)
                                 1#)
                              1#)
                      System.Console.ANSI.Common.Green
                      -> GHC.Types.I#
                           (GHC.Prim.+#
                              (GHC.Prim.+#
                                 (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ds1) 5#)
                                 2#)
                              1#)
                      System.Console.ANSI.Common.Yellow
                      -> GHC.Types.I#
                           (GHC.Prim.+#
                              (GHC.Prim.+#
                                 (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ds1) 5#)
                                 3#)
                              1#)
                      System.Console.ANSI.Common.Blue
                      -> GHC.Types.I#
                           (GHC.Prim.+#
                              (GHC.Prim.+#
                                 (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ds1) 5#)
                                 4#)
                              1#)
                      System.Console.ANSI.Common.Magenta
                      -> GHC.Types.I#
                           (GHC.Prim.+#
                              (GHC.Prim.+#
                                 (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ds1) 5#)
                                 5#)
                              1#)
                      System.Console.ANSI.Common.Cyan
                      -> GHC.Types.I#
                           (GHC.Prim.+#
                              (GHC.Prim.+#
                                 (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ds1) 5#)
                                 6#)
                              1#)
                      System.Console.ANSI.Common.White
                      -> GHC.Types.I#
                           (GHC.Prim.+#
                              (GHC.Prim.+#
                                 (GHC.Prim.*# (GHC.Prim.dataToTag# @ Common.Value ds1) 5#)
                                 7#)
                              1#) } })) -}
c86e4abc5c7a1968e2b3862bb8d1257b
  $w$ctoEnum ::
    GHC.Types.Int
    -> (# System.Console.ANSI.Common.Color, Common.Value #)
  {- Arity: 1, Strictness: <L,1*U(U)>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int) ->
                 let {
                   ds :: (GHC.Types.Int, GHC.Types.Int)
                   = case w of ww { GHC.Types.I# ww1 ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.># ww1 0#) of wild1 {
                       GHC.Types.False
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# ww1 0#) of wild2 {
                            GHC.Types.False
                            -> case GHC.Prim.quotRemInt# ww1 5# of ds1 { (#,#) ipv ipv1 ->
                               (GHC.Types.I# ipv, GHC.Types.I# ipv1) }
                            GHC.Types.True
                            -> case GHC.Prim.quotRemInt#
                                      (GHC.Prim.+# ww1 1#)
                                      5# of ds1 { (#,#) ipv ipv1 ->
                               (GHC.Types.I# (GHC.Prim.-# ipv 1#),
                                GHC.Types.I# (GHC.Prim.-# (GHC.Prim.+# ipv1 5#) 1#)) } }
                       GHC.Types.True
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# ww1 0#) of wild3 {
                            GHC.Types.False
                            -> case GHC.Prim.quotRemInt# ww1 5# of ds1 { (#,#) ipv ipv1 ->
                               (GHC.Types.I# ipv, GHC.Types.I# ipv1) }
                            GHC.Types.True
                            -> case GHC.Prim.quotRemInt#
                                      (GHC.Prim.+# ww1 1#)
                                      5# of ds1 { (#,#) ipv ipv1 ->
                               (GHC.Types.I# (GHC.Prim.-# ipv 1#),
                                GHC.Types.I# (GHC.Prim.-# (GHC.Prim.+# ipv1 5#) 1#)) } } } }
                 } in
                 (# case ds of wild { (,) v s ->
                    System.Console.ANSI.Common.$fEnumColor_$ctoEnum v },
                    case ds of wild { (,) v s ->
                    case s of wild1 { GHC.Types.I# x6 ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.>=# x6 0#) of wild2 {
                      GHC.Types.False -> Common.$fEnumCard1 x6
                      GHC.Types.True
                      -> case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<=# x6 15#) of wild3 {
                           GHC.Types.False -> Common.$fEnumCard1 x6
                           GHC.Types.True
                           -> GHC.Prim.tagToEnum# @ Common.Value x6 } } } } #)) -}
eb7b02e57a57230c97de0244101eb114
  $w$ctoEnum1 :: GHC.Prim.Int# -> Common.Value
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> Common.$fEnumCard1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 15#) of wild1 {
                        GHC.Types.False -> Common.$fEnumCard1 ww
                        GHC.Types.True -> GHC.Prim.tagToEnum# @ Common.Value ww } }) -}
c0853057eff490c78d4a5fff7a5fc113
  $wcountCards :: Common.Deck -> Common.Card -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U,U)>,
     Inline: [0],
     Unfolding: (\ (w :: Common.Deck) (w1 :: Common.Card) ->
                 letrec {
                   $wgo2 :: [Common.Card] -> GHC.Prim.Int# -> GHC.Prim.Int#
                     {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                   = \ (w2 :: [Common.Card]) (ww :: GHC.Prim.Int#) ->
                     case w2 of wild {
                       [] -> ww
                       : y ys
                       -> case y of ww1 { Common.Card ww2 ww3 ->
                          case w1 of ww4 { Common.Card ww5 ww6 ->
                          case Common.$w$c== ww2 ww3 ww5 ww6 of wild1 {
                            GHC.Types.False -> $wgo2 ys ww
                            GHC.Types.True -> $wgo2 ys (GHC.Prim.+# ww 1#) } } } }
                 } in
                 $wgo2 w 0#) -}
a278d66d2c580b47ba8521a70680b0e9
  $wcountCardsByColor ::
    System.Console.ANSI.Common.Color -> Common.Hand -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
e19f66a041dc3f1f6105b631537e5e06
  $wnplicate :: GHC.Prim.Int# -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ @ a (ww :: GHC.Prim.Int#) (w :: [a]) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0# ww) of wild {
                   GHC.Types.False -> GHC.Types.[] @ a
                   GHC.Types.True
                   -> let {
                        lvl32 :: [a] = GHC.Base.++ @ a w (GHC.Types.[] @ a)
                      } in
                      letrec {
                        $wxs3 :: GHC.Prim.Int# -> [a]
                          {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                        = \ (ww1 :: GHC.Prim.Int#) ->
                          case ww1 of ds1 {
                            DEFAULT -> GHC.Base.++ @ a w ($wxs3 (GHC.Prim.-# ds1 1#))
                            1# -> lvl32 }
                      } in
                      $wxs3 ww }) -}
a0fd3ca43307a53116448d6316724e6d
  $wtakeCards ::
    [Common.Card] -> Common.Hand -> (# Common.Hand, Common.Hand #)
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
184372edadbca3b2b0961d54b3c743fa
  $wxs :: GHC.Prim.Int# -> [Common.Card]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
a2a22a24e6047049155e2bdb52ca5ef5
  $wxs1 :: GHC.Prim.Int# -> [Common.Card]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
4112f3bd1e57e2fcc4b0c4f73e141ae0
  data Action
    = UseCard
    | TakeFromDeck
    | EndTurn
    | AttackReverse
    | AttackSkip
    | AttackDraw2
    | AttackWildDraw4
6dd5f8c9c8ee83aa0eafa03e07bde420
  data Attack = NoAttack | Skip | Draw2 | Draw4
ef5b9b5639d25aa2033e174052440b81
  data Card
    = Card {color :: System.Console.ANSI.Common.Color,
            value :: Common.Value}
9e9b03b01d29fe822544230733a5ba96
  type D_Stack = [Common.Card]
e797c19bc134ea3a01d58f7d223548fa
  type Deck = [Common.Card]
1809224cc13d47f71911c54254a1ce28
  type Hand = [Common.Card]
ceab6de2a9d9db59c8387f4e28ffb42e
  data Player
    = HPlayer {name :: GHC.Base.String, hand :: Common.Hand}
    | AiPlayer {name :: GHC.Base.String, hand :: Common.Hand}
    | NoPlayer {name :: GHC.Base.String}
b0ae779c7eb01c33f9c6e0644d45030e
  data State
    = State {players :: [Common.Player],
             e_players :: [Common.Player],
             deck :: Common.Deck,
             d_stack :: Common.D_Stack,
             cur_player :: Common.Player}
eb7b02e57a57230c97de0244101eb114
  data Value
    = Zero
    | One
    | Two
    | Three
    | Four
    | Five
    | Six
    | Seven
    | Eight
    | Nine
    | Plus2
    | Stop
    | ChDir
    | Plus4
    | ChCol
    | Dummy
7c3737679baa2aff35483961bca83617
  attackCards :: [Common.Card]
  {- Unfolding: (Common.$wxs 2#) -}
fa488ad7de2b4314bdddeb9981d6d1b2
  blackenCards :: [Common.Card] -> [Common.Card]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (hand2 :: [Common.Card]) ->
                 GHC.Base.build
                   @ Common.Card
                   (\ @ b1
                      (c1 :: Common.Card -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ Common.Card
                      @ b1
                      (GHC.Base.mapFB
                         @ Common.Card
                         @ b1
                         @ Common.Card
                         c1
                         Common.blackenCards1)
                      n
                      hand2)) -}
14c972a0c64c56445738bff2db60d525
  blackenCards1 :: Common.Card -> Common.Card
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (c1 :: Common.Card) ->
                 case GHC.List.elem
                        @ Common.Card
                        Common.$fEqCard
                        c1
                        Common.changeColCards of wild {
                   GHC.Types.False -> c1
                   GHC.Types.True
                   -> Common.Card
                        System.Console.ANSI.Common.Black
                        (case c1 of wild1 { Common.Card ds ds1 -> ds1 }) }) -}
0b7864b708f4ed2964a47290efad735e
  changeColCards :: [Common.Card]
  {- Unfolding: (Common.changeColCards_go Common.changeColCards1) -}
78573545f787e6574d47ca175c97372f
  changeColCards1 :: [System.Console.ANSI.Common.Color]
  {- Unfolding: (System.Console.ANSI.Common.$fEnumColor_go3 1#) -}
39b6011bbed6229bf272bc34aee53917
  changeColCards_go ::
    [System.Console.ANSI.Common.Color] -> [Common.Card]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
cd59f22f7f8f7cb26105d74e0aa2fbea
  clearHands :: [Common.Player] -> [Common.Player]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (players1 :: [Common.Player]) ->
                 GHC.Base.build
                   @ Common.Player
                   (\ @ b1
                      (c1 :: Common.Player -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ Common.Player
                      @ b1
                      (GHC.Base.mapFB
                         @ Common.Player
                         @ b1
                         @ Common.Player
                         c1
                         Common.clearHands1)
                      n
                      players1)) -}
f2b23e083a210f2db29ce5ed278da743
  clearHands1 :: Common.Player -> Common.Player
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (p' :: Common.Player) ->
                 case p' of wild {
                   Common.HPlayer ds ds1
                   -> Common.HPlayer ds (GHC.Types.[] @ Common.Card)
                   Common.AiPlayer ds ds1
                   -> Common.AiPlayer ds (GHC.Types.[] @ Common.Card)
                   Common.NoPlayer ipv
                   -> Control.Exception.Base.patError
                        @ 'GHC.Types.PtrRepLifted
                        @ Common.Player
                        "src\\Common.hs:124:34-50|record update"# }) -}
e7726ce0730825bca18dacf6986dc991
  color :: Common.Card -> System.Console.ANSI.Common.Color
  RecSel Left Common.Card
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Common.Card) ->
                 case ds of wild { Common.Card ds1 ds2 -> ds1 }) -}
b4965d81ef2178895cb1bb323b3bab75
  colorBlack :: Common.Card -> Common.Card
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(A,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (c1 :: Common.Card) ->
                 Common.Card
                   System.Console.ANSI.Common.Black
                   (case c1 of wild { Common.Card ds ds1 -> ds1 })) -}
a45bea6887136eae8afee3b2005d4b03
  colorInHand ::
    System.Console.ANSI.Common.Color -> Common.Hand -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Common.colorInHand1
                  `cast`
                (<System.Console.ANSI.Common.Color>_R
                 ->_R <Common.Hand>_R
                 ->_R Data.Monoid.N:Any[0]) -}
b1f80b657622f5612604b5347a965b1e
  colorInHand1 ::
    System.Console.ANSI.Common.Color -> Common.Hand -> Data.Monoid.Any
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (col :: System.Console.ANSI.Common.Color)
                   (hand2 :: Common.Hand) ->
                 letrec {
                   go3 :: [Common.Card] -> Data.Monoid.Any
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Common.Card]) ->
                     case ds of wild {
                       [] -> GHC.Types.False `cast` (Sym (Data.Monoid.N:Any[0]))
                       : y ys
                       -> case y of wild1 { Common.Card ds1 ds2 ->
                          case ds1 of wild2 {
                            System.Console.ANSI.Common.Black
                            -> case col of wild3 {
                                 DEFAULT -> go3 ys
                                 System.Console.ANSI.Common.Black
                                 -> GHC.Types.True `cast` (Sym (Data.Monoid.N:Any[0])) }
                            System.Console.ANSI.Common.Red
                            -> case col of wild3 {
                                 DEFAULT -> go3 ys
                                 System.Console.ANSI.Common.Red
                                 -> GHC.Types.True `cast` (Sym (Data.Monoid.N:Any[0])) }
                            System.Console.ANSI.Common.Green
                            -> case col of wild3 {
                                 DEFAULT -> go3 ys
                                 System.Console.ANSI.Common.Green
                                 -> GHC.Types.True `cast` (Sym (Data.Monoid.N:Any[0])) }
                            System.Console.ANSI.Common.Yellow
                            -> case col of wild3 {
                                 DEFAULT -> go3 ys
                                 System.Console.ANSI.Common.Yellow
                                 -> GHC.Types.True `cast` (Sym (Data.Monoid.N:Any[0])) }
                            System.Console.ANSI.Common.Blue
                            -> case col of wild3 {
                                 DEFAULT -> go3 ys
                                 System.Console.ANSI.Common.Blue
                                 -> GHC.Types.True `cast` (Sym (Data.Monoid.N:Any[0])) }
                            System.Console.ANSI.Common.Magenta
                            -> case col of wild3 {
                                 DEFAULT -> go3 ys
                                 System.Console.ANSI.Common.Magenta
                                 -> GHC.Types.True `cast` (Sym (Data.Monoid.N:Any[0])) }
                            System.Console.ANSI.Common.Cyan
                            -> case col of wild3 {
                                 DEFAULT -> go3 ys
                                 System.Console.ANSI.Common.Cyan
                                 -> GHC.Types.True `cast` (Sym (Data.Monoid.N:Any[0])) }
                            System.Console.ANSI.Common.White
                            -> case col of wild3 {
                                 DEFAULT -> go3 ys
                                 System.Console.ANSI.Common.White
                                 -> GHC.Types.True `cast` (Sym (Data.Monoid.N:Any[0])) } } } }
                 } in
                 go3 hand2) -}
b589bfd5dee326bd82d5a8607b94c601
  colorizeWildcard ::
    System.Console.ANSI.Common.Color -> Common.Card -> Common.Card
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(A,1*U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (col :: System.Console.ANSI.Common.Color) (c1 :: Common.Card) ->
                 Common.Card col (case c1 of wild { Common.Card ds ds1 -> ds1 })) -}
d6dc02baad397f859a6ecb9ecfe08279
  countCards :: Common.Deck -> Common.Card -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Common.Deck) (w1 :: Common.Card) ->
                 case Common.$wcountCards w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
2359878e635bbda39021f6e1358635ee
  countCardsByColor ::
    System.Console.ANSI.Common.Color -> Common.Hand -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: System.Console.ANSI.Common.Color) (w1 :: Common.Hand) ->
                 case Common.$wcountCardsByColor w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
75d3ab60b0a30ce5ec6036fbd5e85607
  cur_player :: Common.State -> Common.Player
  RecSel Left Common.State
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Common.State) ->
                 case ds of wild { Common.State ds1 ds2 ds3 ds4 ds5 -> ds5 }) -}
fa96152c9381046d383501f07f707a5f
  d_stack :: Common.State -> Common.D_Stack
  RecSel Left Common.State
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Common.State) ->
                 case ds of wild { Common.State ds1 ds2 ds3 ds4 ds5 -> ds4 }) -}
b5ca5dd3e517cde1cbb702b57ac2caf0
  deck :: Common.State -> Common.Deck
  RecSel Left Common.State
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Common.State) ->
                 case ds of wild { Common.State ds1 ds2 ds3 ds4 ds5 -> ds3 }) -}
26c48cf41ee13dfd2b1a8b106d325f17
  e_players :: Common.State -> [Common.Player]
  RecSel Left Common.State
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Common.State) ->
                 case ds of wild { Common.State ds1 ds2 ds3 ds4 ds5 -> ds2 }) -}
5938b31de7a6cc272db1dd06d71ed66a
  fullDeck :: Common.Deck
  {- Unfolding: (GHC.Base.++
                   @ Common.Card
                   Common.numberCards
                   Common.fullDeck1) -}
bf79a95765ec5a6968b932d421bf77d7
  fullDeck1 :: [Common.Card]
  {- Unfolding: (GHC.Base.++
                   @ Common.Card
                   Common.attackCards
                   Common.wildCards) -}
022ff4d66bb0fba3bc2cad07abc53e40
  getCardWithColor ::
    System.Console.ANSI.Common.Color
    -> Common.Hand -> GHC.Base.Maybe Common.Card
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Common.getCardWithColor1
                  `cast`
                (<System.Console.ANSI.Common.Color>_R
                 ->_R <Common.Hand>_R
                 ->_R Data.Monoid.N:First[0] <Common.Card>_N) -}
62c958dc3d2ee1beab969a8446d5de37
  getCardWithColor1 ::
    System.Console.ANSI.Common.Color
    -> Common.Hand -> Data.Monoid.First Common.Card
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (col :: System.Console.ANSI.Common.Color)
                   (hand2 :: Common.Hand) ->
                 letrec {
                   go3 :: [Common.Card] -> Data.Monoid.First Common.Card
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Common.Card]) ->
                     case ds of wild {
                       []
                       -> (GHC.Base.Nothing @ Common.Card)
                            `cast`
                          (Sym (Data.Monoid.N:First[0]) <Common.Card>_N)
                       : y ys
                       -> case y of wild1 { Common.Card ds1 ds2 ->
                          case ds1 of wild2 {
                            System.Console.ANSI.Common.Black
                            -> case col of wild3 {
                                 DEFAULT -> go3 ys
                                 System.Console.ANSI.Common.Black
                                 -> (GHC.Base.Just @ Common.Card wild1)
                                      `cast`
                                    (Sym (Data.Monoid.N:First[0]) <Common.Card>_N) }
                            System.Console.ANSI.Common.Red
                            -> case col of wild3 {
                                 DEFAULT -> go3 ys
                                 System.Console.ANSI.Common.Red
                                 -> (GHC.Base.Just @ Common.Card wild1)
                                      `cast`
                                    (Sym (Data.Monoid.N:First[0]) <Common.Card>_N) }
                            System.Console.ANSI.Common.Green
                            -> case col of wild3 {
                                 DEFAULT -> go3 ys
                                 System.Console.ANSI.Common.Green
                                 -> (GHC.Base.Just @ Common.Card wild1)
                                      `cast`
                                    (Sym (Data.Monoid.N:First[0]) <Common.Card>_N) }
                            System.Console.ANSI.Common.Yellow
                            -> case col of wild3 {
                                 DEFAULT -> go3 ys
                                 System.Console.ANSI.Common.Yellow
                                 -> (GHC.Base.Just @ Common.Card wild1)
                                      `cast`
                                    (Sym (Data.Monoid.N:First[0]) <Common.Card>_N) }
                            System.Console.ANSI.Common.Blue
                            -> case col of wild3 {
                                 DEFAULT -> go3 ys
                                 System.Console.ANSI.Common.Blue
                                 -> (GHC.Base.Just @ Common.Card wild1)
                                      `cast`
                                    (Sym (Data.Monoid.N:First[0]) <Common.Card>_N) }
                            System.Console.ANSI.Common.Magenta
                            -> case col of wild3 {
                                 DEFAULT -> go3 ys
                                 System.Console.ANSI.Common.Magenta
                                 -> (GHC.Base.Just @ Common.Card wild1)
                                      `cast`
                                    (Sym (Data.Monoid.N:First[0]) <Common.Card>_N) }
                            System.Console.ANSI.Common.Cyan
                            -> case col of wild3 {
                                 DEFAULT -> go3 ys
                                 System.Console.ANSI.Common.Cyan
                                 -> (GHC.Base.Just @ Common.Card wild1)
                                      `cast`
                                    (Sym (Data.Monoid.N:First[0]) <Common.Card>_N) }
                            System.Console.ANSI.Common.White
                            -> case col of wild3 {
                                 DEFAULT -> go3 ys
                                 System.Console.ANSI.Common.White
                                 -> (GHC.Base.Just @ Common.Card wild1)
                                      `cast`
                                    (Sym (Data.Monoid.N:First[0]) <Common.Card>_N) } } } }
                 } in
                 go3 hand2) -}
4784e65bbfb2421051814823fe14f304
  getCardWithValue ::
    Common.Value -> Common.Hand -> GHC.Base.Maybe Common.Card
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Common.getCardWithValue1
                  `cast`
                (<Common.Value>_R
                 ->_R <Common.Hand>_R
                 ->_R Data.Monoid.N:First[0] <Common.Card>_N) -}
41e3c3577852da2aa30c126ac5991182
  getCardWithValue1 ::
    Common.Value -> Common.Hand -> Data.Monoid.First Common.Card
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (val :: Common.Value) (hand2 :: Common.Hand) ->
                 letrec {
                   go3 :: [Common.Card] -> Data.Monoid.First Common.Card
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Common.Card]) ->
                     case ds of wild {
                       []
                       -> (GHC.Base.Nothing @ Common.Card)
                            `cast`
                          (Sym (Data.Monoid.N:First[0]) <Common.Card>_N)
                       : y ys
                       -> case y of wild1 { Common.Card ds1 ds2 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==#
                                    (GHC.Prim.dataToTag# @ Common.Value ds2)
                                    (GHC.Prim.dataToTag# @ Common.Value val)) of wild2 {
                            GHC.Types.False -> go3 ys
                            GHC.Types.True
                            -> (GHC.Base.Just @ Common.Card wild1)
                                 `cast`
                               (Sym (Data.Monoid.N:First[0]) <Common.Card>_N) } } }
                 } in
                 go3 hand2) -}
d0159dd1d6d5c3569d94585c3eb04f69
  getCards :: Common.Deck -> Common.Card -> [Common.Card]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U,U)>,
     Unfolding: (\ (d :: Common.Deck) (c1 :: Common.Card) ->
                 letrec {
                   go3 :: [Common.Card] -> [Common.Card]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Common.Card]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Common.Card
                       : y ys
                       -> case y of ww { Common.Card ww1 ww2 ->
                          case c1 of ww3 { Common.Card ww4 ww5 ->
                          case Common.$w$c== ww1 ww2 ww4 ww5 of wild1 {
                            GHC.Types.False -> go3 ys
                            GHC.Types.True -> GHC.Types.: @ Common.Card ww (go3 ys) } } } }
                 } in
                 go3 d) -}
3558a4647a6ba71ea3e6da7e09d04450
  getWildcard :: Common.Hand -> GHC.Base.Maybe Common.Card
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Common.getWildcard1
                  `cast`
                (<Common.Hand>_R ->_R Data.Monoid.N:First[0] <Common.Card>_N) -}
44c5ff0718ad577e0f524df191beaab9
  getWildcard1 :: Common.Hand -> Data.Monoid.First Common.Card
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (hand2 :: Common.Hand) ->
                 Common.getWildcard_go hand2) -}
44436b083356f049c1fc21b5e31a9e8c
  getWildcard_go :: [Common.Card] -> Data.Monoid.First Common.Card
  {- Arity: 1, Strictness: <S,1*U> -}
9477337fa5ce27ccfca96e9185a946de
  hand :: Common.Player -> Common.Hand
  RecSel Left Common.Player
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Common.Player) ->
                 case ds of wild {
                   Common.HPlayer ds1 ds2 -> ds2
                   Common.AiPlayer ds1 ds2 -> ds2
                   Common.NoPlayer ipv -> Common.hand1 }) -}
e3b46f1d66e3ccb8dc42692b34a7bdbc
  hand1 :: Common.Hand
  {- Strictness: x -}
7257e1f0e01b923ab4f15bc034eaee10
  isAttackCard :: Common.Card -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (c1 :: Common.Card) ->
                 GHC.List.elem
                   @ Common.Card
                   Common.$fEqCard
                   c1
                   Common.attackCards) -}
d80c0cbbc796e94881c2cf09a01a15ff
  isChangeColCards :: Common.Card -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (c1 :: Common.Card) ->
                 GHC.List.elem
                   @ Common.Card
                   Common.$fEqCard
                   c1
                   Common.changeColCards) -}
3098e378229d94a9327bfdff9a6ad758
  isNumberCard :: Common.Card -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (c1 :: Common.Card) ->
                 GHC.List.elem
                   @ Common.Card
                   Common.$fEqCard
                   c1
                   Common.numberCards) -}
df7f389741b66a60a0daf8bdc810b614
  isWildcard :: Common.Card -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (c1 :: Common.Card) ->
                 GHC.List.elem @ Common.Card Common.$fEqCard c1 Common.wildCards) -}
0113d4aeb766b4e04121e25ebed3ea74
  name :: Common.Player -> GHC.Base.String
  RecSel Left Common.Player
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Common.Player) ->
                 case ds of wild {
                   Common.HPlayer ds1 ds2 -> ds1
                   Common.AiPlayer ds1 ds2 -> ds1
                   Common.NoPlayer ds1 -> ds1 }) -}
3b2e21d51a5898e54b5fc2e9c7ea5447
  noCard :: Common.Card
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Common.whiteDummy -}
531ce62bd7cce0ba0b512173a92ec953
  noPlayer :: Common.Player
  {- Strictness: m3, Unfolding: (Common.NoPlayer Common.noPlayer1) -}
bf932e0a8d0627a089f8fa13ff235aec
  noPlayer1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "No Player"#) -}
5478cc9900de9f6374a8efcb52909827
  nplicate :: GHC.Types.Int -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Types.Int) (w1 :: [a]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Common.$wnplicate @ a ww1 w1 }) -}
714b11ac71765f2e5d37207b0cf5cf95
  numberCards :: [Common.Card]
  {- Unfolding: (Common.numberCards_go Common.changeColCards1) -}
b18750b70ace44266396e9674f13f5b0
  numberCards_go ::
    [System.Console.ANSI.Common.Color] -> [Common.Card]
  {- Arity: 1, Strictness: <S,1*U> -}
b5f73b2ed5f6e17270c4a03b1d3b5d9e
  players :: Common.State -> [Common.Player]
  RecSel Left Common.State
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Common.State) ->
                 case ds of wild { Common.State ds1 ds2 ds3 ds4 ds5 -> ds1 }) -}
f15c00c5c354a0cb6981ad024f9211a2
  takeCards ::
    [Common.Card] -> Common.Hand -> (Common.Hand, Common.Hand)
  {- Arity: 2, Strictness: <S,1*U><L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [Common.Card]) (w1 :: Common.Hand) ->
                 case Common.$wtakeCards w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
c64d3321bb0cc6d885a665f7f4eba9a5
  value :: Common.Card -> Common.Value
  RecSel Left Common.Card
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Common.Card) ->
                 case ds of wild { Common.Card ds1 ds2 -> ds2 }) -}
9370ef87637767c9e1eb48875914e8c4
  valueInHand :: Common.Value -> Common.Hand -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Common.valueInHand1
                  `cast`
                (<Common.Value>_R
                 ->_R <Common.Hand>_R
                 ->_R Data.Monoid.N:Any[0]) -}
196ab9572779229910299b0b8881326f
  valueInHand1 :: Common.Value -> Common.Hand -> Data.Monoid.Any
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (val :: Common.Value) (hand2 :: Common.Hand) ->
                 letrec {
                   go3 :: [Common.Card] -> Data.Monoid.Any
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Common.Card]) ->
                     case ds of wild {
                       [] -> GHC.Types.False `cast` (Sym (Data.Monoid.N:Any[0]))
                       : y ys
                       -> case y of wild1 { Common.Card ds1 ds2 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==#
                                    (GHC.Prim.dataToTag# @ Common.Value ds2)
                                    (GHC.Prim.dataToTag# @ Common.Value val)) of wild2 {
                            GHC.Types.False -> go3 ys
                            GHC.Types.True
                            -> GHC.Types.True `cast` (Sym (Data.Monoid.N:Any[0])) } } }
                 } in
                 go3 hand2) -}
2f7bccf021d2ef7b8d54ee32ff1d6306
  whiteDummy :: Common.Card
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Common.Card
                   System.Console.ANSI.Common.White
                   Common.Dummy) -}
edfd77ff4045cf3f8839c758367353f0
  wildCards :: [Common.Card]
  {- Unfolding: (Common.$wxs1 4#) -}
5d8681791cdecf694f66823327c22490
  wildcardInHand :: Common.Hand -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Common.wildcardInHand1
                  `cast`
                (<Common.Hand>_R ->_R Data.Monoid.N:Any[0]) -}
1ed80665fb9399cb34910333786d3816
  wildcardInHand1 :: Common.Hand -> Data.Monoid.Any
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (hand2 :: Common.Hand) ->
                 Common.wildcardInHand_go hand2) -}
3d3477a9afbf8ec5a4c4b9591ad08d57
  wildcardInHand_go :: [Common.Card] -> Data.Monoid.Any
  {- Arity: 1, Strictness: <S,1*U> -}
instance [safe] GHC.Enum.Enum [Common.Card] = Common.$fEnumCard
instance [safe] GHC.Enum.Enum [Common.Value] = Common.$fEnumValue
instance [safe] GHC.Classes.Eq [Common.Action] = Common.$fEqAction
instance [safe] GHC.Classes.Eq [Common.Attack] = Common.$fEqAttack
instance [safe] GHC.Classes.Eq [Common.Card] = Common.$fEqCard
instance [safe] GHC.Classes.Eq [Common.Player] = Common.$fEqPlayer
instance [safe] GHC.Classes.Eq [Common.Value] = Common.$fEqValue
instance [safe] GHC.Classes.Ord [Common.Card] = Common.$fOrdCard
instance [safe] GHC.Classes.Ord [Common.Value] = Common.$fOrdValue
instance [safe] GHC.Read.Read [Common.Action] = Common.$fReadAction
instance [safe] GHC.Read.Read [Common.Attack] = Common.$fReadAttack
instance [safe] GHC.Read.Read [Common.Card] = Common.$fReadCard
instance [safe] GHC.Read.Read [Common.Value] = Common.$fReadValue
instance [safe] GHC.Show.Show [Common.Action] = Common.$fShowAction
instance [safe] GHC.Show.Show [Common.Attack] = Common.$fShowAttack
instance [safe] GHC.Show.Show [Common.Card] = Common.$fShowCard
instance [safe] GHC.Show.Show [Common.Player] = Common.$fShowPlayer
instance [safe] GHC.Show.Show [Common.Value] = Common.$fShowValue
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False


name: hake
version: 1.3.8.1
id: hake-1.3.8.1-6u5wvJBT7RI9uu4IK8mtlC
key: hake-1.3.8.1-6u5wvJBT7RI9uu4IK8mtlC
license: GPL
maintainer: Yoshikuni Jujo <PAF01143@nifty.ne.jp>
stability: stable
homepage: http://homepage3.nifty.com/salamander/second/projects/hake/index.xhtml
package-url: http://code.haskell.org/hake/
synopsis: make tool. ruby : rake = haskell : hake
description:
    Like ruby's rake, hake have Hakefile which is Haskell source.
    .
    And Hakefile is like rake's Rakefile, and make's Makefile.
    .
    Hakefile is just Haskell source code,
    then you can use all Haskell features.
    .
    New:
    .
    > deps :: [ String ] -> [ String] -> Rule
    > deps trgts srcs == file trgts srcs $ \_ _ -> []
    .
    Use 'deps' if you want to define no command rule for new
    Targets.
    Please use addDeps if you will add dependencies to already
    existing targets.
    .
    Hakefile example:
    .
    > import Development.Hake
    > import Development.Hake.FunSetRaw
    > hake_rules = [
    >
    >  dflt	[ "greeting" ]
    >  ,
    >  file	[ "greeting", "greeting.log" ] [ "hello.o", "good-bye.o" ] $
    > 		const2 [ [ "linker", "-o", "greeting", "hello.o", "good-bye.o" ] ]
    >  ,
    >  rule	".o" ".sfx1" $
    > 		\t (s:_) -> [ [ "compiler1", s, "-o", t ] ]
    >  ,
    >  rule	".o" ".sfx2" $
    > 		\t (s:_) -> [ [ "compiler2", s, "-o", t ] ]
    >  ,
    >  task	"clean"
    >       [ [ "rm", "-f", "hello.o", "good-by.o", "greeting", "greeting.log" ] ]
    >  ,
    >  mkfl	"script.sh" [ "#!/bin/sh", "echo This is script", "echo made by Hakefile" ]
    >  ,
    >  ruleSS "" ".o" $ \t (s:_) -> [ (".c",  [ [ "gcc", s, "-o", t ] ] ) ,
    >                             (".cc", [ [ "g++", s, "-o", t ] ] ) ] )
    >  ,
    >  rule   ".o" ".c" $ \_ (s:_) -> [ [ "gcc", "-c", s ] ]
    >  ,
    >  rule   ".o" ".cc" $ \_ (s:_) -> [ [ "g++", "-c", s ] ]
    >  ,
    >  base   (=="foo") (const [ "foo.gen", "Hakefile" ]) $ \t (s:_) _ _ -> do
    >               gen <- readFile s
    >               writeFile t $ unlines $
    >                 [ "#!/bin/sh", "echo This is script" ] ++ lines gen
    >               return ExitSuccess
    >
    >  ]
    >
    > main = hake hake_rules
category: Development
author: Yoshikuni Jujo
exposed: True
exposed-modules:
    Development.Hake Development.Hake.OldFunSet Development.Hake.FunSet
    Development.Hake.FunSetRaw Development.Hake.FunSetIO
hidden-modules: Development.Hake.Variables Development.Hake.Types
                Development.Hake.Tools Development.Hake.RunHake
                Development.Hake.Core Development.Hake.Tribial
                Development.Hake.DirectoryTools
abi: e539d677a73d9cdcaf96cba98cb4dbf4
trusted: False
import-dirs: C:\Users\jpaci\OneDrive\Documents\GitHub\uno\.cabal-sandbox\x86_64-windows-ghc-8.0.1\hake-1.3.8.1-6u5wvJBT7RI9uu4IK8mtlC
library-dirs: C:\Users\jpaci\OneDrive\Documents\GitHub\uno\.cabal-sandbox\x86_64-windows-ghc-8.0.1\hake-1.3.8.1-6u5wvJBT7RI9uu4IK8mtlC
data-dir: C:\Users\jpaci\OneDrive\Documents\GitHub\uno\.cabal-sandbox\x86_64-windows-ghc-8.0.1\hake-1.3.8.1
hs-libraries: HShake-1.3.8.1-6u5wvJBT7RI9uu4IK8mtlC
depends:
    base-4.9.0.0 directory-1.2.6.2 filepath-1.4.1.0
    mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM process-1.4.2.0
    regexpr-0.5.4-zufO9VqQJYG9z11vfOL13 time-1.6.0.1
    yjtools-0.9.18-kzvT6IjllU29gmoGLSMMQ
haddock-interfaces: C:\Users\jpaci\OneDrive\Documents\GitHub\uno\.cabal-sandbox\doc\x86_64-windows-ghc-8.0.1\hake-1.3.8.1\html\hake.haddock
haddock-html: C:\Users\jpaci\OneDrive\Documents\GitHub\uno\.cabal-sandbox\doc\x86_64-windows-ghc-8.0.1\hake-1.3.8.1\html
